/* description: Parses end executes mathematical expressions. */

/* lexical grammar */
%lex
%%

\s+                   /* skip whitespace */

/* Reserved words */
//Termination Functions
'tf'			return 'tf'
'so-tf'			return 'so-tf'
'sk-tf'			return 'sk-tf'
'bi-tf'			return 'bi-tf'

//Adaptation Functions	
'af'			return 'af'
'so-af'			return 'so-af'
'sk-af'			return 'sk-af'
'bi-af'			return 'bi-af'

//Layer Processor Functions
'lpf'			return 'lpf'
'so-lpf'		return 'so-lpf'
'sk-lpf'		return 'sk-lpf'
'bi-lpf'		return 'bi-lpf'

//Matrices
'matrix'		return 'matrix'
'uni-matrix'	return 'uni-matrix'	
'so-matrix'		return 'so-matrix'
'sk-matrix'		return 'sk-matrix'
'bi-matrix'		return 'bi-matrix'

//Subnetwork
'sn'			return 'sn'

//Physical Media
'pm'			return 'pm'

//Port
'input'			return 'input'
'output'		return 'output'

//Reference Points
'rp'			return 'rp'
'fep'			return 'fep'
'ap'			return 'ap'
'fp'			return 'fp'

//Transport Entities
'ate'			return 'ate'
'nc'			return 'nc'
'lc'			return 'lc'
'mc'			return 'mc'
'cfte'			return 'cfte'

//Layer Network
'layer'			return 'layer'

//Equipment
'equip'			return 'equip'

//Interfaces
'in_int'		return 'in_int'
'out_int'		return 'out_int'

//Site
'site'			return 'site'

/* Relations */
'binds'			return 'binds'
'connects'		return 'connects'
'client'		return 'client'
'maps'			return 'maps'

/* Attributes */
'location'		return 'location'
'type'			return 'type'

/* Language constraints */
':'				return 'colon'
'.'				return 'dot'
';'				return 'semicolon'
'='				return 'equal'
','				return 'comma'
'{'				return 'l_curly_bracket'
'}'				return 'r_curly_bracket'
'('				return 'l_parenthesis'
')'				return 'r_parenthesis'
('-')?[0-9]+':'[0-9]+':'[0-9]+ return 'graus'
[A-Za-z_]+[0-9A-Za-z_]* return 'variavel'
[0-9]+			return 'n_int'
"/*"(.|\n|\r)*?"*/"             /* ignore */
<<EOF>>         return 'EOF'
.				return 'INVALID'

/lex


%start expressions

%% /* language grammar */

expressions
    : Instruction EOF | Instruction expressions
    ;

Element:
TransportFunction | AdaptationFunction | LayerProcessorFunction | Matrices | 'sn' | 'pm' | Port |  ReferencePoint | TransportEntity | 'layer' | 'equip' | Interfaces | 'site'
;

TransportFunction:
	'tf' | 'so-tf' | 'sk-tf' | 'bi-tf'
;

AdaptationFunction:
	'af' | 'so-af' | 'sk-af' | 'bi-af'
;

LayerProcessorFunction:
	'lpf' | 'so-lpf' | 'sk-lpf' | 'bi-lpf'
;

Matrices:
	'matrix' | 'uni-matrix' | 'so-matrix' | 'sk-matrix' | 'bi-matrix'
;

Port:
	'input' | 'output'
;

ReferencePoint:
	'rp' | 'fep' | 'ap' | 'fp'
;

TransportEntity:
	'ate' | 'nc' | 'lc' | 'mc' | 'cfte'
;

Interfaces:
	'in_int' | 'out_int'
;

Instruction:
ElementDeclaration | ElementComposition | SimpleRelation | AssignableRelation | AddLocationTF | AddTypeTTF
;

ElementDeclaration:
(Element colon VariableDeclaration semicolon) %{newElement($1);}%
;

VariableDeclaration:
variavel %{newVariable($$);}% | (variavel comma  VariableDeclaration) %{newVariable($1);}% 
;

SimpleRelation:
(RelationType l_parenthesis variavel comma variavel r_parenthesis semicolon ) %{newSimpleRelation($1,$3,$5);}%
;

RelationType:
'binds' | 'connects' | 'client' | 'maps'
;

AddLocationTF:
	str_location | geo_location
;

str_location:
(variavel dot location colon variavel semicolon) %{addLocationStr($1,$5);}% 
;

geo_location:
(variavel dot location colon l_parenthesis graus comma graus r_parenthesis semicolon) %{addLocationGeo($1,$6,$8);}% 
;

AddTypeTTF:
(variavel dot type colon variavel semicolon) %{addType($1,$5);}% 
;

ElementComposition:
(variavel Composition semicolon) %{newElementComposition($1);}%
;

Composition:
l_curly_bracket used_variables r_curly_bracket
;

used_variables:
variavel %{usedVariable($$);}% | (variavel comma used_variables) %{usedVariable($1);}% 
;

AssignableRelation:
(variavel equal RelationTypeAssignable l_parenthesis variavel comma variavel r_parenthesis semicolon) %{newAssignableRelation($1,$3,$5,$7);}%
;

RelationTypeAssignable:
'binds' | 'connects'
;

%%


//javascript code

/*
Set currentLine like this:
currentLine = yylineno;
switch (yystate)
*/

currentLine = 0;
//Global variables used	
 
warning = "";
 
hashVarType = new Array();
hashTypeVar = new Array();
hashSimpleRelation= new Array();
hashAssignableRelation= new Array();
hashUsedRelation = new Array();

hashUsedVariable = new Array();

hashComposition = new Array();

hashRelation = new Array();
hashRelation["binds"] = new Array();
hashRelation["connects"] = new Array();
hashRelation["maps"] = new Array();
hashRelation["client"] = new Array();
hashRelation["component_of"] = new Array();

hashAttribute = new Array();
hashAttribute['str_location'] = new Array();
hashAttribute['geo_location'] = new Array();
hashAttribute['tf_type'] = new Array();


hashSuperType = new Array();

/* Initializing super types */
//TFs
hashSuperType["so-tf"] = "tf";
hashSuperType["sk-tf"] = "tf";
hashSuperType["bi-tf"] = "tf";

//AFs
hashSuperType["so-af"] = "af";
hashSuperType["sk-af"] = "af";
hashSuperType["bi-af"] = "af";

//LPFs
hashSuperType["so-lpf"] = "lpf";
hashSuperType["sk-lpf"] = "lpf";
hashSuperType["bi-lpf"] = "lpf";

//Matrices
hashSuperType["uni-matrix"] = "matrix";
hashSuperType["bi-matrix"] = "matrix";
hashSuperType["so-matrix"] = "matrix";
hashSuperType["sk-matrix"] = "matrix";

//Ports
hashSuperType["input"] = "port";
hashSuperType["output"] = "port";

//Reference Points
hashSuperType["fp"] = "rp";
hashSuperType["fep"] = "rp";
hashSuperType["ap"] = "rp";

//Interfaces
hashSuperType["in_int"] = "interface";
hashSuperType["out_int"] = "interface";

//Transport Entity
hashSuperType["ate"] = "transport_entity";
hashSuperType["nc"] = "transport_entity";
hashSuperType["lc"] = "transport_entity";
hashSuperType["mc"] = "transport_entity";
hashSuperType["cfte"] = "transport_entity";


/* Initializing Relations cardinalities */
//componentOf cardinalities needs to be inverted!!!

/* Simple Relations and Component Of */
/* Layer */
//Layer * client * Layer
hashSimpleRelation["client"+"layer"+"layer"] = createRelation(0,-1,0,-1);

//Layer * componentOf * Transport Function
hashSimpleRelation["component_of"+"layer"+"tf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["component_of"+"layer"+"af"] = createRelation(0,-1,0,-1);
hashSimpleRelation["component_of"+"layer"+"lpf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["component_of"+"layer"+"matrix"] = createRelation(0,-1,0,-1);
hashSimpleRelation["component_of"+"layer"+"sn"] = createRelation(0,-1,0,-1);
hashSimpleRelation["component_of"+"layer"+"pm"] = createRelation(0,-1,0,-1);

/* Equipment */
//Output Interface 0..1 binds 0..1 Input Interface
hashSimpleRelation["binds"+"out_int"+"in_int"] = createRelation(0,1,0,1);

//Input Interface 0..1 connects 0..1 Input
hashSimpleRelation["connects"+"out_int"+"in_int"] = createRelation(0,1,0,1);

//Input Interface 0..1 maps 0..1 Input
hashSimpleRelation["maps"+"in_int"+"input"] = createRelation(0,1,0,1);

//Output Interface 0..1 maps 0..1 Output
hashSimpleRelation["maps"+"out_int"+"output"] = createRelation(0,1,0,1);

//Interface 0..1 binds 0..1 Port
hashSimpleRelation["binds"+"interface"+"port"] = createRelation(0,1,0,1);

//Equipment 0..1 componentOf * Interface
hashSimpleRelation["component_of"+"equip"+"interface"] = createRelation(0,-1,0,1);

//Equipment * componentOf 0..1 Transport Function
hashSimpleRelation["component_of"+"equip"+"tf"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"equip"+"af"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"equip"+"lpf"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"equip"+"matrix"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"equip"+"sn"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"equip"+"pm"] = createRelation(0,-1,0,1);

/* Site */
//Site 0..1 componentOf * Equipment
hashSimpleRelation["component_of"+"site"+"equip"] = createRelation(0,-1,0,1);

/* Transport Entity */
//Reference Point * connects * Reference Points
hashSimpleRelation["connects"+"rp"+"rp"] = createRelation(0,-1,0,1);

/* Reference Point */
//Bindable Element * binds * Bindable Element
hashSimpleRelation["binds"+"tf"+"port"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"af"+"port"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"lpf"+"port"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"matrix"+"port"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"sn"+"port"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"pm"+"port"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"port"+"tf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"port"+"af"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"port"+"lpf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"port"+"matrix"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"port"+"sn"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"port"+"pm"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"port"+"port"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"tf"+"tf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"af"+"tf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"lpf"+"tf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"matrix"+"tf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"sn"+"tf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"pm"+"tf"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"tf"+"af"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"tf"+"lpf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"tf"+"matrix"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"tf"+"sn"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"tf"+"pm"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"af"+"af"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"lpf"+"af"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"matrix"+"af"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"sn"+"af"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"pm"+"af"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"af"+"lpf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"af"+"matrix"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"af"+"sn"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"af"+"pm"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"lpf"+"lpf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"matrix"+"lpf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"sn"+"lpf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"pm"+"lpf"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"lpf"+"matrix"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"lpf"+"sn"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"lpf"+"pm"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"matrix"+"matrix"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"sn"+"matrix"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"pm"+"matrix"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"matrix"+"sn"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"matrix"+"pm"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"sn"+"sn"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"pm"+"sn"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"sn"+"pm"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"pm"+"pm"] = createRelation(0,-1,0,-1);

/* Transport Function */
//Transport Function 0..1 componentOf * Port
hashSimpleRelation["component_of"+"tf"+"port"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"af"+"port"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"lpf"+"port"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"matrix"+"port"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"snc"+"port"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"pm"+"port"] = createRelation(0,-1,0,1);

//TF 0..1 componentOf 0..2 TF
hashSimpleRelation["component_of"+"tf"+"tf"] = createRelation(0,2,0,1);

//AF 0..1 componentOf 0..2 AF
hashSimpleRelation["component_of"+"af"+"af"] = createRelation(0,2,0,1);

//LPF 0..1 componentOf 0..2 LPF
hashSimpleRelation["component_of"+"lpf"+"lpf"] = createRelation(0,2,0,1);

//Matrix 0..1 componentOf 0..2 Matrix
hashSimpleRelation["component_of"+"matrix"+"matrix"] = createRelation(0,2,0,1);

//************//

/* Assignable Relations */
/* Transport Entity */
hashAssignableRelation["transport_entity"+"connects"+"rp"+"rp"] = createRelation(0,2,0,1);

/* Reference Point */
hashAssignableRelation["rp"+"binds"+"tf"+"port"] = createRelation(0,-1,0,1);
hashAssignableRelation["rp"+"binds"+"af"+"port"] = createRelation(0,-1,0,1);
hashAssignableRelation["rp"+"binds"+"lpf"+"port"] = createRelation(0,-1,0,1);
hashAssignableRelation["rp"+"binds"+"matrix"+"port"] = createRelation(0,-1,0,1);
hashAssignableRelation["rp"+"binds"+"sn"+"port"] = createRelation(0,-1,0,1);
hashAssignableRelation["rp"+"binds"+"pm"+"port"] = createRelation(0,-1,0,1);

/* Methods */    
/*
	Put in the hash the variables and verify multi-declarations
*/
function newVariable(variable) {
	//Verify if the variable has been declared already
	if(hashVarType[variable] !== undefined){
		throw new VariableMultiDeclared((currentLine+1),variable);	
	}
	//Put a flag in hash of variables to signal the use
	hashVarType[variable] = 0;
}

/*
	Set the type of declared variables
*/
function newElement(element){
	//For all declared variables 
	for (var variable in hashVarType){
		//if not initialized yet
		if(hashVarType[variable] == 0){
			//set the type for variable
			hashVarType[variable] = element;
			//push the variables in hashType
			if(hashTypeVar[element] === undefined){
				hashTypeVar[element] = [];
			}
			hashTypeVar[element].push(variable);
		}		
	}
}

/*
	Create a internal relation: source relation target
*/
function newSimpleRelation(relation, source, target){
	//verify if source and target are valid variables
	verifyDelclaredVariable(source);
	verifyDelclaredVariable(target);
	
	//Get supertypes of source and general
	var sourceType = getSuperType(hashVarType[source]);
	var targetType = getSuperType(hashVarType[target]);		
	
	var reference;
	//Verify relationship possibility
	if(hashSimpleRelation[relation+sourceType+targetType] === undefined){
		//For specific cases
		if(hashSimpleRelation[relation+hashVarType[source]+hashVarType[target]] === undefined){
			throw new WrongRelation(currentLine+1);
		}else{
			reference = relation+hashVarType[source]+hashVarType[target];			
		}		
	}else{
		reference = relation+sourceType+targetType;
	}
	
	//Create relationship
	if(hashUsedRelation[reference] === undefined){
		//first case, initialize
		hashUsedRelation[reference] = [];
	}
	//add current relationship to hashUsedRelation
	hashUsedRelation[reference].push(createRelationship(source, relation, target));
	
	//Verify cardinality possibility
	var relationshipDefined = hashSimpleRelation[reference];
	
	var srcCont = 0, trgCont = 0;
	
	var arr = hashUsedRelation[reference];
	
	//for all relationships of the tuple {relation, sourceType, targetType}
	for(var i = 0; i < arr.length; i++){
		var relationship = arr[i];
		//source cardinality verification
		if(relationship.source == source){
			srcCont++;
		}
		
		if(relationship.target == target){
			trgCont++;
		}
	}
	
	if(relationshipDefined.srcMax != -1 && srcCont > relationshipDefined.srcMax){
		throw new WrongCardinality(currentLine+1);
	}
	
	if(relationshipDefined.trgMax != -1 && trgCont > relationshipDefined.trgMax){
		throw new WrongCardinality(currentLine+1);
	}	
	
	if(relation != "component_of"){
		hashRelation[relation].push(source+":"+target);
	}
}

/*
	Create a assignable relation
*/

function newAssignableRelation(ret, relation, source, target){
	//Create a new simple relation between source and target
	newSimpleRelation(relation,source,target);
	
	//get supertypes
	var retType = getSuperType(hashVarType[ret]);
	var sourceType = getSuperType(hashVarType[source]);
	var targetType = getSuperType(hashVarType[target]);
		
	//verify if it's a possible assignable relation
	if(hashAssignableRelation[retType+relation+sourceType+targetType] === undefined){
		throw new WrongRelation(currentLine+1);
	}
	
	hashRelation[relation].push(ret+":"+source+":"+target);
}

/*
	Hold used variables
*/
function usedVariable(variable){
	hashUsedVariable.push(variable);
}

/*
	Creating element compositions
*/
function newElementComposition(whole){
	var cofRel = whole+":";
	
	for(var i = 0; i < hashUsedVariable.length; i++){
		newSimpleRelation("component_of",whole,hashUsedVariable[i]);
		cofRel += hashUsedVariable[i]+",";
	}
	
	cofRel = cofRel.substring(0,cofRel.length-1);
	hashRelation["component_of"].push(cofRel);
	
	//clean up used variables
	hashUsedVariable = [];
}

/*
	Adding attributes
*/
function addLocationStr(owner,str){
	verifyDelclaredVariable(owner);
	
	var elemSuperType = getSuperType(hashVarType[owner]);
	var transportFunctions = new Array("tf","af","lpf","matrix","pm","sn","port");
	
	if(transportFunctions.indexOf(elemSuperType) == -1){
		if(transportFunctions.indexOf(hashVarType[owner]) == -1){
			throw new WrongAttributeDeclaration(currentLine+1);
		}
		throw new WrongAttributeDeclaration(currentLine+1);
	}
	
	hashAttribute['str_location'].push(owner+":"+str);
}

function addLocationGeo(owner, g1,g2){
	verifyDelclaredVariable(owner);
	
	var elemSuperType = getSuperType(hashVarType[owner]);
	var transportFunctions = new Array("tf","af","lpf","matrix","pm","sn","port");
	
	if(transportFunctions.indexOf(elemSuperType) == -1){
		if(transportFunctions.indexOf(hashVarType[owner]) == -1){
			throw new WrongAttributeDeclaration(currentLine+1);
		}
		throw new WrongAttributeDeclaration(currentLine+1);
	}
	
	
	g1 = g1.replace(/:/g, '*');
	g2 = g2.replace(/:/g, '*');
	hashAttribute['geo_location'].push(owner+":"+g1+":"+g2);
}

function addType(tf,str){
	verifyDelclaredVariable(tf);
	
	var tfSuperType = getSuperType(hashVarType[tf]);
	
	if(tfSuperType != "tf"){
		throw new WrongAttributeDeclaration(currentLine+1);
	}
	
	hashAttribute['tf_type'].push(tf+":"+str);
}

/* Private Functions */
//Verify if the variable has been declared already
function verifyDelclaredVariable(variable){
	if(hashVarType[variable] === undefined){
		throw new VariableNotDeclared((currentLine+1),variable);	
	}
}

function createRelation(srcMin, srcMax, trgMin, trgMax){
	var relation = new Object();
	
	relation.srcMin = srcMin;
	relation.srcMax = srcMax;
	relation.trgMin = trgMin;
	relation.trgMax = trgMax;
	
	return relation;
}

function createRelationship(source, relation, target){
	var relationship = new Object();
	
	relationship.source = source;
	relationship.relation = relation;
	relationship.target = target;
	
	return relationship;
}

function getSuperType(cls){	
	if(hashSuperType[cls] === undefined){
		return cls;
	}
	return hashSuperType[cls];	
}

/* Exceptions */

//An variable was multi-declared
function VariableMultiDeclared(line, variable) {
   this.message = "Line "+line+": The variable "+variable+" was  multi-declared";
}

//An variable was not declared
function VariableNotDeclared(line, variable) {
   this.message = "Line "+line+": The variable "+variable+" was  not declared";
}

//An wrong relation was used
function WrongRelation(line){
	this.message = "Line "+line+": Variable type not supported at function";		
}

//Wrong cardinality
function WrongCardinality(line){
	this.message = "Line "+line+": Incorrect attribution";		
}

//Wrong Attribute declaration
function WrongAttributeDeclaration(line){
	this.message = "Line "+line+": Incorrect attribution";		
}