/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace(){},
yy: {},
symbols_: {"error":2,"expressions":3,"Instruction":4,"EOF":5,"Element":6,"TransportFunction":7,"Port":8,"ReferencePoint":9,"TransportEntity":10,"layer":11,"TF_TTF":12,"TF_AF":13,"TF_M":14,"sn":15,"pm":16,"ttf":17,"so-ttf":18,"sk-ttf":19,"bi-ttf":20,"af":21,"so-af":22,"sk-af":23,"bi-af":24,"matrix":25,"uni-matrix":26,"so-matrix":27,"sk-matrix":28,"bi-matrix":29,"input":30,"output":31,"rp":32,"tcp":33,"ap":34,"cp":35,"te":36,"trail":37,"nc":38,"lc":39,"mc":40,"snc":41,"uso_variaveis":42,"variavel":43,"comma":44,"declaracao_variaveis":45,"ElementDeclaration":46,"ElementComposition":47,"SimpleRelation":48,"AssignableRelation":49,"AddLocationTF":50,"AddTypeTTF":51,"str_location":52,"geo_location":53,"dot":54,"location":55,"colon":56,"semicolon":57,"l_parenthesis":58,"graus":59,"r_parenthesis":60,"type":61,"Composition":62,"l_curly_bracket":63,"r_curly_bracket":64,"Rel":65,"binds":66,"connects":67,"client":68,"equal":69,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"layer",15:"sn",16:"pm",17:"ttf",18:"so-ttf",19:"sk-ttf",20:"bi-ttf",21:"af",22:"so-af",23:"sk-af",24:"bi-af",25:"matrix",26:"uni-matrix",27:"so-matrix",28:"sk-matrix",29:"bi-matrix",30:"input",31:"output",32:"rp",33:"tcp",34:"ap",35:"cp",36:"te",37:"trail",38:"nc",39:"lc",40:"mc",41:"snc",43:"variavel",44:"comma",54:"dot",55:"location",56:"colon",57:"semicolon",58:"l_parenthesis",59:"graus",60:"r_parenthesis",61:"type",63:"l_curly_bracket",64:"r_curly_bracket",66:"binds",67:"connects",68:"client",69:"equal"},
productions_: [0,[3,2],[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[12,1],[12,1],[12,1],[12,1],[13,1],[13,1],[13,1],[13,1],[14,1],[14,1],[14,1],[14,1],[14,1],[8,1],[8,1],[9,1],[9,1],[9,1],[9,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[42,1],[42,3],[45,1],[45,3],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[50,1],[50,1],[52,6],[53,10],[51,6],[46,4],[47,3],[62,3],[48,7],[65,1],[65,1],[65,1],[49,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 38:usoVar(this.$);
break;
case 39:usoVar($$[$0-2]);
break;
case 40:newVar(this.$);
break;
case 41:newVar($$[$0-2]);
break;
case 50:addLocationStr($$[$0-5],$$[$0-1]);
break;
case 51:addLocationGeo($$[$0-9],$$[$0-4],$$[$0-2]);
break;
case 52:addType($$[$0-5],$$[$0-1]);
break;
case 53:newElement($$[$0-3]);
break;
case 54:newElementComposition($$[$0-2]);
break;
case 56:newRelation($$[$0-6],$$[$0-4],$$[$0-2]);
break;
case 60:newAssignableRelation($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]);
break;
}
},
table: [{3:1,4:2,6:9,7:14,8:15,9:16,10:17,11:[1,18],12:22,13:23,14:24,15:[1,25],16:[1,26],17:[1,39],18:[1,40],19:[1,41],20:[1,42],21:[1,43],22:[1,44],23:[1,45],24:[1,46],25:[1,47],26:[1,48],27:[1,49],28:[1,50],29:[1,51],30:[1,27],31:[1,28],32:[1,29],33:[1,30],34:[1,31],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],43:[1,10],46:3,47:4,48:5,49:6,50:7,51:8,52:12,53:13,65:11,66:[1,19],67:[1,20],68:[1,21]},{1:[3]},{3:53,4:2,5:[1,52],6:9,7:14,8:15,9:16,10:17,11:[1,18],12:22,13:23,14:24,15:[1,25],16:[1,26],17:[1,39],18:[1,40],19:[1,41],20:[1,42],21:[1,43],22:[1,44],23:[1,45],24:[1,46],25:[1,47],26:[1,48],27:[1,49],28:[1,50],29:[1,51],30:[1,27],31:[1,28],32:[1,29],33:[1,30],34:[1,31],35:[1,32],36:[1,33],37:[1,34],38:[1,35],39:[1,36],40:[1,37],41:[1,38],43:[1,10],46:3,47:4,48:5,49:6,50:7,51:8,52:12,53:13,65:11,66:[1,19],67:[1,20],68:[1,21]},{5:[2,42],11:[2,42],15:[2,42],16:[2,42],17:[2,42],18:[2,42],19:[2,42],20:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],27:[2,42],28:[2,42],29:[2,42],30:[2,42],31:[2,42],32:[2,42],33:[2,42],34:[2,42],35:[2,42],36:[2,42],37:[2,42],38:[2,42],39:[2,42],40:[2,42],41:[2,42],43:[2,42],66:[2,42],67:[2,42],68:[2,42]},{5:[2,43],11:[2,43],15:[2,43],16:[2,43],17:[2,43],18:[2,43],19:[2,43],20:[2,43],21:[2,43],22:[2,43],23:[2,43],24:[2,43],25:[2,43],26:[2,43],27:[2,43],28:[2,43],29:[2,43],30:[2,43],31:[2,43],32:[2,43],33:[2,43],34:[2,43],35:[2,43],36:[2,43],37:[2,43],38:[2,43],39:[2,43],40:[2,43],41:[2,43],43:[2,43],66:[2,43],67:[2,43],68:[2,43]},{5:[2,44],11:[2,44],15:[2,44],16:[2,44],17:[2,44],18:[2,44],19:[2,44],20:[2,44],21:[2,44],22:[2,44],23:[2,44],24:[2,44],25:[2,44],26:[2,44],27:[2,44],28:[2,44],29:[2,44],30:[2,44],31:[2,44],32:[2,44],33:[2,44],34:[2,44],35:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],43:[2,44],66:[2,44],67:[2,44],68:[2,44]},{5:[2,45],11:[2,45],15:[2,45],16:[2,45],17:[2,45],18:[2,45],19:[2,45],20:[2,45],21:[2,45],22:[2,45],23:[2,45],24:[2,45],25:[2,45],26:[2,45],27:[2,45],28:[2,45],29:[2,45],30:[2,45],31:[2,45],32:[2,45],33:[2,45],34:[2,45],35:[2,45],36:[2,45],37:[2,45],38:[2,45],39:[2,45],40:[2,45],41:[2,45],43:[2,45],66:[2,45],67:[2,45],68:[2,45]},{5:[2,46],11:[2,46],15:[2,46],16:[2,46],17:[2,46],18:[2,46],19:[2,46],20:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],27:[2,46],28:[2,46],29:[2,46],30:[2,46],31:[2,46],32:[2,46],33:[2,46],34:[2,46],35:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],41:[2,46],43:[2,46],66:[2,46],67:[2,46],68:[2,46]},{5:[2,47],11:[2,47],15:[2,47],16:[2,47],17:[2,47],18:[2,47],19:[2,47],20:[2,47],21:[2,47],22:[2,47],23:[2,47],24:[2,47],25:[2,47],26:[2,47],27:[2,47],28:[2,47],29:[2,47],30:[2,47],31:[2,47],32:[2,47],33:[2,47],34:[2,47],35:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[2,47],43:[2,47],66:[2,47],67:[2,47],68:[2,47]},{56:[1,54]},{54:[1,57],62:55,63:[1,58],69:[1,56]},{58:[1,59]},{5:[2,48],11:[2,48],15:[2,48],16:[2,48],17:[2,48],18:[2,48],19:[2,48],20:[2,48],21:[2,48],22:[2,48],23:[2,48],24:[2,48],25:[2,48],26:[2,48],27:[2,48],28:[2,48],29:[2,48],30:[2,48],31:[2,48],32:[2,48],33:[2,48],34:[2,48],35:[2,48],36:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],41:[2,48],43:[2,48],66:[2,48],67:[2,48],68:[2,48]},{5:[2,49],11:[2,49],15:[2,49],16:[2,49],17:[2,49],18:[2,49],19:[2,49],20:[2,49],21:[2,49],22:[2,49],23:[2,49],24:[2,49],25:[2,49],26:[2,49],27:[2,49],28:[2,49],29:[2,49],30:[2,49],31:[2,49],32:[2,49],33:[2,49],34:[2,49],35:[2,49],36:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],43:[2,49],66:[2,49],67:[2,49],68:[2,49]},{56:[2,3]},{56:[2,4]},{56:[2,5]},{56:[2,6]},{56:[2,7]},{58:[2,57]},{58:[2,58]},{58:[2,59]},{56:[2,8]},{56:[2,9]},{56:[2,10]},{56:[2,11]},{56:[2,12]},{56:[2,26]},{56:[2,27]},{56:[2,28]},{56:[2,29]},{56:[2,30]},{56:[2,31]},{56:[2,32]},{56:[2,33]},{56:[2,34]},{56:[2,35]},{56:[2,36]},{56:[2,37]},{56:[2,13]},{56:[2,14]},{56:[2,15]},{56:[2,16]},{56:[2,17]},{56:[2,18]},{56:[2,19]},{56:[2,20]},{56:[2,21]},{56:[2,22]},{56:[2,23]},{56:[2,24]},{56:[2,25]},{1:[2,1]},{1:[2,2]},{43:[1,61],45:60},{57:[1,62]},{65:63,66:[1,19],67:[1,20],68:[1,21]},{55:[1,65],61:[1,64]},{42:66,43:[1,67]},{43:[1,68]},{57:[1,69]},{44:[1,70],57:[2,40]},{5:[2,54],11:[2,54],15:[2,54],16:[2,54],17:[2,54],18:[2,54],19:[2,54],20:[2,54],21:[2,54],22:[2,54],23:[2,54],24:[2,54],25:[2,54],26:[2,54],27:[2,54],28:[2,54],29:[2,54],30:[2,54],31:[2,54],32:[2,54],33:[2,54],34:[2,54],35:[2,54],36:[2,54],37:[2,54],38:[2,54],39:[2,54],40:[2,54],41:[2,54],43:[2,54],66:[2,54],67:[2,54],68:[2,54]},{58:[1,71]},{56:[1,72]},{56:[1,73]},{64:[1,74]},{44:[1,75],64:[2,38]},{44:[1,76]},{5:[2,53],11:[2,53],15:[2,53],16:[2,53],17:[2,53],18:[2,53],19:[2,53],20:[2,53],21:[2,53],22:[2,53],23:[2,53],24:[2,53],25:[2,53],26:[2,53],27:[2,53],28:[2,53],29:[2,53],30:[2,53],31:[2,53],32:[2,53],33:[2,53],34:[2,53],35:[2,53],36:[2,53],37:[2,53],38:[2,53],39:[2,53],40:[2,53],41:[2,53],43:[2,53],66:[2,53],67:[2,53],68:[2,53]},{43:[1,61],45:77},{43:[1,78]},{43:[1,79]},{43:[1,80],58:[1,81]},{57:[2,55]},{42:82,43:[1,67]},{43:[1,83]},{57:[2,41]},{44:[1,84]},{57:[1,85]},{57:[1,86]},{59:[1,87]},{64:[2,39]},{60:[1,88]},{43:[1,89]},{5:[2,52],11:[2,52],15:[2,52],16:[2,52],17:[2,52],18:[2,52],19:[2,52],20:[2,52],21:[2,52],22:[2,52],23:[2,52],24:[2,52],25:[2,52],26:[2,52],27:[2,52],28:[2,52],29:[2,52],30:[2,52],31:[2,52],32:[2,52],33:[2,52],34:[2,52],35:[2,52],36:[2,52],37:[2,52],38:[2,52],39:[2,52],40:[2,52],41:[2,52],43:[2,52],66:[2,52],67:[2,52],68:[2,52]},{5:[2,50],11:[2,50],15:[2,50],16:[2,50],17:[2,50],18:[2,50],19:[2,50],20:[2,50],21:[2,50],22:[2,50],23:[2,50],24:[2,50],25:[2,50],26:[2,50],27:[2,50],28:[2,50],29:[2,50],30:[2,50],31:[2,50],32:[2,50],33:[2,50],34:[2,50],35:[2,50],36:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],41:[2,50],43:[2,50],66:[2,50],67:[2,50],68:[2,50]},{44:[1,90]},{57:[1,91]},{60:[1,92]},{59:[1,93]},{5:[2,56],11:[2,56],15:[2,56],16:[2,56],17:[2,56],18:[2,56],19:[2,56],20:[2,56],21:[2,56],22:[2,56],23:[2,56],24:[2,56],25:[2,56],26:[2,56],27:[2,56],28:[2,56],29:[2,56],30:[2,56],31:[2,56],32:[2,56],33:[2,56],34:[2,56],35:[2,56],36:[2,56],37:[2,56],38:[2,56],39:[2,56],40:[2,56],41:[2,56],43:[2,56],66:[2,56],67:[2,56],68:[2,56]},{57:[1,94]},{60:[1,95]},{5:[2,60],11:[2,60],15:[2,60],16:[2,60],17:[2,60],18:[2,60],19:[2,60],20:[2,60],21:[2,60],22:[2,60],23:[2,60],24:[2,60],25:[2,60],26:[2,60],27:[2,60],28:[2,60],29:[2,60],30:[2,60],31:[2,60],32:[2,60],33:[2,60],34:[2,60],35:[2,60],36:[2,60],37:[2,60],38:[2,60],39:[2,60],40:[2,60],41:[2,60],43:[2,60],66:[2,60],67:[2,60],68:[2,60]},{57:[1,96]},{5:[2,51],11:[2,51],15:[2,51],16:[2,51],17:[2,51],18:[2,51],19:[2,51],20:[2,51],21:[2,51],22:[2,51],23:[2,51],24:[2,51],25:[2,51],26:[2,51],27:[2,51],28:[2,51],29:[2,51],30:[2,51],31:[2,51],32:[2,51],33:[2,51],34:[2,51],35:[2,51],36:[2,51],37:[2,51],38:[2,51],39:[2,51],40:[2,51],41:[2,51],43:[2,51],66:[2,51],67:[2,51],68:[2,51]}],
defaultActions: {14:[2,3],15:[2,4],16:[2,5],17:[2,6],18:[2,7],19:[2,57],20:[2,58],21:[2,59],22:[2,8],23:[2,9],24:[2,10],25:[2,11],26:[2,12],27:[2,26],28:[2,27],29:[2,28],30:[2,29],31:[2,30],32:[2,31],33:[2,32],34:[2,33],35:[2,34],36:[2,35],37:[2,36],38:[2,37],39:[2,13],40:[2,14],41:[2,15],42:[2,16],43:[2,17],44:[2,18],45:[2,19],46:[2,20],47:[2,21],48:[2,22],49:[2,23],50:[2,24],51:[2,25],52:[2,1],53:[2,2],74:[2,55],77:[2,41],82:[2,39]},
parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};



//javascript code

/*
Set currentLine like this:
currentLine = yylineno;
switch (yystate)
*/

currentLine = 0;
 //Global variables used	
hashVar = new Array();
hashElement = new Array();
hashInvElement = new Array();
hashAux = new Array();
hashComposition = new Array();
hashUseVar = new Array();
hashRelationConnects = new Array();
hashRelationBinds = new Array();
hashRelationClient = new Array();
hashLocationTFGeo = new Array();
hashLocationTFStr = new Array();
hashTypeTTF = new Array();
hashUsedInComposition = new Array();

warning = "";
    
/*
	Put in the hash the variables and verify multi-declarations
*/
function newVar(v) {
	if(hashVar[v] == 0){
		//An variable was multi-declared
		throw new Error("Line "+(currentLine+1)+": The variable "+v+" was  multi-declared");	
	}
	hashVar[v] = 0;
	hashAux[hashAux.length] = v;	

	return "";
}

/*
	Creating a hash with the name of the element and its variables
*/
function newElement(v) {
	for (var k = 0; k < hashAux.length; k++) {
		hashInvElement[hashAux[k]] = v;
	}
	if(hashElement[v] !== undefined){
		hashElement[v].push(hashAux);
	}else{
		hashElement[v] = hashAux;		
	}
	hashAux = new Array();
	return "";
}

/*
	Create a composition between an element and its compenents
*/
function newElementComposition(v) {
	if(hashVar[v] != 0){
		//Variable not declared
		throw new Error("Line "+(currentLine+1)+": The variable "+v+" was  not declared");	
	}

	//Create the new hash for the element composition
	if(hashComposition[v] == null){
		hashComposition[v] = new Array();
	}
	
	//put the variables in the hashComposition
	for(var i = 0; i < hashUseVar.length; i++){
		hashComposition[v].push(hashUseVar[i]);
	}
	
	var validateV = false;

	var tranFuncs = new Array("ttf","so-ttf","sk-ttf","bi-tff","af","so-af","sk-af","bi-af","matrix","uni-matrix","so-matrix","sk-matrix","bi-matrix","pm", "sn");
	
	for (var j = 0; j < tranFuncs.length; j++) {
		if(hashInvElement[v].indexOf(tranFuncs[j]) >= 0){
			//IF v is a Transport Function
			//split the string. ex.: so-ttf to ttf
			var all = hashInvElement[v];
			var aux = hashInvElement[v].split("-");
			if(aux.length == 2){
				all = aux[1];
			}
			for (var i = 0; i < hashUseVar.length; i++) {
				//split the string. ex.: so-ttf to ttf
				var party = hashInvElement[hashUseVar[i]];
				
				//Verify if the party was used					
				if(hashUsedInComposition[hashUseVar[i]] == null){				
					hashUsedInComposition[hashUseVar[i]] = 0;							
				}else{
					throw new Error("Line "+(currentLine+1)+": Invalid cardinality at composition’s part");
				}

				aux = hashInvElement[hashUseVar[i]].split("-");
				if(aux.length == 2){
					party = aux[1];
				}

				if(all != party){
					//Some part is not a Transport Function
					if((party.indexOf("input") == 0) || (party.indexOf("output") == 0)){
						//Is a composition by a Transport Function and a Port
						//Verify the use of Ports
						if(hashUsedInComposition[hashUseVar[i]] == 0){
							hashUsedInComposition[hashUseVar[i]]++;
						}else{
							throw new Error("Line "+(currentLine+1)+": Invalid cardinality at composition’s part");
						}
						continue;			
					}
					throw new Error("Line "+(currentLine+1)+": Not allowed types at composition");	
				}
			}
			
			var qntPorts = 0;

			for(var k = 0; k < hashComposition[v].length; k++){
				if(hashInvElement[hashComposition[v][k]] == "input" || hashInvElement[hashComposition[v][k]] == "output"){
					qntPorts++;
				}
			}
			if(hashComposition[v].length-qntPorts > 2){
				throw new Error("Line "+(currentLine+1)+": Invalid cardinality at composition’s whole");			
			}

			validateV = true;
			break; //Stop the loop if v is a Transport Function
		}
	}

	if(hashInvElement[v].indexOf("layer") == 0){
		//v is a Layer
		for (var j = 0; j < hashUseVar.length; j++) {
			var find = false;
			for (var i = 0; i < tranFuncs.length; i++) {
				//look if in all parties of the composition are transport functions
				if(hashInvElement[hashUseVar[j]].indexOf(tranFuncs[i]) == 0){
					find = true;
					break;
				}
			}
			if(!find){
				throw new Error("Line "+(currentLine+1)+": Composition problem at its part (invalid cardinality or not allowed type)");
			}
		}
		validateV = true;
	}	
	
	//Validate if the order of the composition's paramaters are corrects
	if(!validateV){
		throw new Error("Line "+(currentLine+1)+": Not allowed types at composition");
	}

	hashUseVar = new Array();

	return "";		
}

function newRelation(r,src,dst){
	if(hashVar[src] != 0){
		//Variable not declared
		throw new Error("Line "+(currentLine+1)+": The variable "+src+" was  not declared");	
	}
	if(hashVar[dst] != 0){
		//Variable not declared
		throw new Error("Line "+(currentLine+1)+": The variable "+dst+" was  not declared");	
	}
	if(r == "connects"){
		//Verify if in connects(a,b) a and b are a Reference Point
		var tranFuncs = new Array("tcp","ap","cp");
		var toA = hashInvElement[src];
		var toB = hashInvElement[dst];
		var keepA = false;
		var keepB = false;

		for (var i = 0; i < tranFuncs.length; i++) {
			if(toA == tranFuncs[i]){
				keepA = true;	
			}
			if(toB == tranFuncs[i]){
				keepB = true;	
			}
		}

		if(!keepA){
			throw new Error("Line "+(currentLine+1)+": Variable type not supported at function");	
		}

		if(!keepB){
			throw new Error("Line "+(currentLine+1)+": Variable type not supported at function");	
		}
		hashRelationConnects.push(new Array(src,dst));
	}else if(r == "binds"){
		//Verify if in binds(a,b) a and b are a Bindable Element
		var tranFuncs = new Array("ttf","so-ttf","sk-ttf","bi-tff","af","so-af","sk-af","bi-af","matrix","uni-matrix","so-matrix","sk-matrix","bi-matrix","pm", "sn","input","output");
		var toA = hashInvElement[src];
		var toB = hashInvElement[dst];
		var keepA = false;
		var keepB = false;

		for (var i = 0; i < tranFuncs.length; i++) {
			if(toA == tranFuncs[i]){
				keepA = true;	
			}
			if(toB == tranFuncs[i]){
				keepB = true;	
			}
		}

		if(!keepA){
			throw new Error("Line "+(currentLine+1)+": Variable type not supported at function");		
		}

		if(!keepB){
			throw new Error("Line "+(currentLine+1)+": Variable type not supported at function");	
		}
		hashRelationBinds.push(new Array(src,dst));
	}else if(r == "client"){
		if(hashInvElement[src] != "layer"){
			throw new Error("Line "+(currentLine+1)+": Variable type not supported at function");	
		}

		if(hashInvElement[dst] != "layer"){
			throw new Error("Line "+(currentLine+1)+": Variable type not supported at function");	
		}
		hashRelationClient.push(new Array(src,dst));
	}
}

function newAssignableRelation(org,r,src,dst){
	if(hashVar[src] != 0){
		//Variable not declared
		throw new Error("Line "+(currentLine+1)+": The variable "+src+" was  not declared");	
	}
	if(hashVar[dst] != 0){
		//Variable not declared
		throw new Error("Line "+(currentLine+1)+": The variable "+dst+" was  not declared");		
	}
	if(hashVar[org] != 0){
		//Variable not declared
		throw new Error("Line "+(currentLine+1)+": The variable "+org+" was  not declared");	
	}
	if(r == "connects"){
		//Verify if in x = connects(a,b) a and b are a Reference Point and x is a Transport Entity
		var refPoint = new Array("tcp", "ap", "cp","rp");
		var toA = hashInvElement[src];
		var toB = hashInvElement[dst];
		var keepA = false;
		var keepB = false;

		for (var i = 0; i < refPoint.length; i++) {
			if(toA == refPoint[i]){
				keepA = true;	
			}
			if(toB == refPoint[i]){
				keepB = true;	
			}
		}

		if(!keepA){
			throw new Error("Line "+(currentLine+1)+": Variable type not supported at function");	
		}

		if(!keepB){
			throw new Error("Line "+(currentLine+1)+": Variable type not supported at function");	
		}

		//If x is a Transport Entity
		var tranEntity = new Array("trail", "nc", "lc", "mc","snc");
		var toX = hashInvElement[org];
		var keepX = false;

		for (var i = 0; i < tranEntity.length; i++) {
			if(toX == tranEntity[i]){
				keepX = true;	
			}
		}

		if(!keepX){
			throw new Error("Line "+(currentLine+1)+": Variable type not supported at function");	
		}

		hashRelationConnects.push(new Array(src,dst,org));
	}else if(r == "binds"){
		//Verify if in x = binds(a,b) a and b are a Bindable Element and x is a Reference Point
		var tranFuncs = new Array("ttf","so-ttf","sk-ttf","bi-tff","af","so-af","sk-af","bi-af","matrix","uni-matrix","so-matrix","sk-matrix","bi-matrix","pm", "sn","input","output");
		var toA = hashInvElement[src];
		var toB = hashInvElement[dst];
		var keepA = false;
		var keepB = false;

		for (var i = 0; i < tranFuncs.length; i++) {
			if(toA == tranFuncs[i]){
				keepA = true;	
			}
			if(toB == tranFuncs[i]){
				keepB = true;	
			}
		}

		if(!keepA){
			throw new Error("Line "+(currentLine+1)+": Variable type not supported at function");	
		}

		if(!keepB){
			throw new Error("Line "+(currentLine+1)+": Variable type not supported at function");	
		}
	
		//If x is a Reference Point
		var refPoint = new Array("tcp", "ap", "cp","rp");
		var toX = hashInvElement[org];
		var keepX = false;

		for (var i = 0; i < refPoint.length; i++) {
			if(toX == refPoint[i]){
				keepX = true;	
			}
		}

		if(!keepX){
			throw new Error("Line "+(currentLine+1)+": Variable type not supported at function");	
		}
		hashRelationBinds.push(new Array(src,dst,org));
	}else if(r == "client"){
		throw new Error("Line "+(currentLine+1)+": Incorrect attribution");	
	}
}

function usoVar(v){
	if(hashVar[v] != 0){
		//Variable not declared
		throw new Error("Line "+(currentLine+1)+": The variable "+v+" was  not declared");	
	}	
	hashUseVar.push(v);	
	
	return "";
}

function addLocationStr(tf,str){
	if(hashVar[tf] != 0){
		//Variable not declared
		throw new Error("Line "+(currentLine+1)+": The variable "+tf+" was  not declared");	
	}
	//Verifiy if the type used are corrects
	var tranFuncs = new Array("ttf","so-ttf","sk-ttf","bi-tff","af","so-af","sk-af","bi-af","matrix","uni-matrix","so-matrix","sk-matrix","bi-matrix","pm", "sn","input","output");
	var auxTFtype = hashInvElement[tf];
	var keep = false;

	for (var i = 0; i < tranFuncs.length; i++) {
		if(auxTFtype == tranFuncs[i]){
			keep = true;	
		}
	}

	if(!keep){
		//The variable can't have a location
		throw new Error("Line "+(currentLine+1)+": Incorrect attribution");	
	}

	if(hashLocationTFStr[tf] != null){
		warning += "Line "+(currentLine+1)+": The variable "+tf+" was multi-declared. The first declaration was ignored and the last declaration was adopted";	
	}
	hashLocationTFStr[tf] = str;
	return "";
}

function addLocationGeo(tf,g1,g2){
	if(hashVar[tf] != 0){
		//Variable not declared
		throw new Error("Line "+(currentLine+1)+": The variable "+tf+" was  not declared");	
	}
	//Verifiy if the types used are corrects
	var tranFuncs = new Array("ttf","so-ttf","sk-ttf","bi-tff","af","so-af","sk-af","bi-af","matrix","uni-matrix","so-matrix","sk-matrix","bi-matrix","pm", "sn","input","output");
	var auxTFtype = hashInvElement[tf];
	var keep = false;

	for (var i = 0; i < tranFuncs.length; i++) {
		if(auxTFtype == tranFuncs[i]){
			keep = true;	
		}
	}

	if(!keep){
		//The variable can't have a location
		throw new Error("Line "+(currentLine+1)+": Incorrect attribution");	
	}

	if(hashLocationTFGeo[tf] != null){
		warning += "Line "+(currentLine+1)+": The variable "+tf+" was multi-declared. The first declaration was ignored and the last declaration was adopted";	
	}
	g1 = g1.replace(/:/g, '*');
	g2 = g2.replace(/:/g, '*');
	hashLocationTFGeo[tf] = g1+"+"+g2;
	return "";
}


function addType(ttf,type){
	if(hashVar[ttf] != 0){
		//Variable not declared
		throw new Error("Line "+(currentLine+1)+": The variable "+ttf+" was  not declared");	
	}
//Verifiy if the types used are corrects
	var tranFuncs = new Array("ttf","so-ttf","sk-ttf","bi-tff");
	var auxTFtype = hashInvElement[ttf];
	var keep = false;

	for (var i = 0; i < tranFuncs.length; i++) {
		if(auxTFtype == tranFuncs[i]){
			keep = true;	
		}
	}

	if(!keep){
		//The variable can't have a location
		throw new Error("Line "+(currentLine+1)+": Incorrect attribution");
	}

	if(hashTypeTTF[ttf] != null){
		warning += "Line "+(currentLine+1)+": The variable "+ttf+" was multi-declared. The first declaration was ignored and the last declaration was adopted";	
	}
	hashTypeTTF[ttf] = type;
	return "";
}
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str,hash){if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

// resets the lexer, sets new input
setInput:function (input){this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

// consumes and returns one char from the input
input:function (){var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

// unshifts one char (or a string) into the input
unput:function (ch){var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]}this.yyleng=this.yytext.length;return this},

// When called from action, caches matched text and appends it on next action
more:function (){this._more=true;return this},

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function (){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

// retain first n characters of the match
less:function (n){this.unput(this.match.slice(n))},

// displays already matched input, i.e. for error messages
pastInput:function (){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

// displays upcoming input, i.e. for error messages
upcomingInput:function (){var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function (){var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match,indexed_rule){var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}return false},

// return next match in input
next:function (){if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

// return next match that has a token
lex:function lex(){var r=this.next();if(r){return r}else{return this.lex()}},

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition){this.conditionStack.push(condition)},

// pop the previously active lexer condition state off the condition stack
popState:function popState(){var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n){n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

// alias for begin(condition)
pushState:function pushState(condition){this.begin(condition)},

// return the number of states currently on the stack
stateStackSize:function stateStackSize(){return this.conditionStack.length},
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 17
break;
case 2:return 18
break;
case 3:return 19
break;
case 4:return 20
break;
case 5:return 21
break;
case 6:return 22
break;
case 7:return 23
break;
case 8:return 24
break;
case 9:return 25
break;
case 10:return 26	
break;
case 11:return 27
break;
case 12:return 28
break;
case 13:return 29
break;
case 14:return 15
break;
case 15:return 16
break;
case 16:return 30
break;
case 17:return 31
break;
case 18:return 32
break;
case 19:return 33
break;
case 20:return 34
break;
case 21:return 35
break;
case 22:return 36
break;
case 23:return 37
break;
case 24:return 38
break;
case 25:return 39
break;
case 26:return 40
break;
case 27:return 41
break;
case 28:return 11
break;
case 29:return 66
break;
case 30:return 67
break;
case 31:return 68
break;
case 32:return 55
break;
case 33:return 61
break;
case 34:return 56
break;
case 35:return 54
break;
case 36:return 57
break;
case 37:return 69
break;
case 38:return 44
break;
case 39:return 63
break;
case 40:return 64
break;
case 41:return 58
break;
case 42:return 60
break;
case 43:return 59
break;
case 44:return 43
break;
case 45:return 'n_int'
break;
case 46:/* ignore */
break;
case 47:return 5
break;
case 48:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:ttf\b)/,/^(?:so-ttf\b)/,/^(?:sk-ttf\b)/,/^(?:bi-ttf\b)/,/^(?:af\b)/,/^(?:so-af\b)/,/^(?:sk-af\b)/,/^(?:bi-af\b)/,/^(?:matrix\b)/,/^(?:uni-matrix\b)/,/^(?:so-matrix\b)/,/^(?:sk-matrix\b)/,/^(?:bi-matrix\b)/,/^(?:sn\b)/,/^(?:pm\b)/,/^(?:input\b)/,/^(?:output\b)/,/^(?:rp\b)/,/^(?:tcp\b)/,/^(?:ap\b)/,/^(?:cp\b)/,/^(?:te\b)/,/^(?:trail\b)/,/^(?:nc\b)/,/^(?:lc\b)/,/^(?:mc\b)/,/^(?:snc\b)/,/^(?:layer\b)/,/^(?:binds\b)/,/^(?:connects\b)/,/^(?:client\b)/,/^(?:location\b)/,/^(?:type\b)/,/^(?::)/,/^(?:\.)/,/^(?:;)/,/^(?:=)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:(-)?[0-9]+:[0-9]+:[0-9]+)/,/^(?:[A-Za-z_]+[0-9A-Za-z_]*)/,/^(?:[0-9]+)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}