/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace(){},
yy: {},
symbols_: {"error":2,"expressions":3,"Instruction":4,"EOF":5,"Element":6,"TransportFunction":7,"AdaptationFunction":8,"LayerProcessorFunction":9,"Matrices":10,"sn":11,"pm":12,"Port":13,"ReferencePoint":14,"TransportEntity":15,"layer":16,"equip":17,"Interfaces":18,"site":19,"tf":20,"so-tf":21,"sk-tf":22,"bi-tf":23,"af":24,"so-af":25,"sk-af":26,"bi-af":27,"lpf":28,"so-lpf":29,"sk-lpf":30,"bi-lpf":31,"matrix":32,"uni-matrix":33,"so-matrix":34,"sk-matrix":35,"bi-matrix":36,"input":37,"output":38,"rp":39,"fep":40,"ap":41,"fp":42,"te":43,"trail":44,"nc":45,"lc":46,"mc":47,"snc":48,"input_int":49,"output_int":50,"ElementDeclaration":51,"ElementComposition":52,"SimpleRelation":53,"AssignableRelation":54,"AddLocationTF":55,"AddTypeTTF":56,"colon":57,"VariableDeclaration":58,"semicolon":59,"variavel":60,"comma":61,"RelationType":62,"l_parenthesis":63,"r_parenthesis":64,"binds":65,"connects":66,"client":67,"maps":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"sn",12:"pm",16:"layer",17:"equip",19:"site",20:"tf",21:"so-tf",22:"sk-tf",23:"bi-tf",24:"af",25:"so-af",26:"sk-af",27:"bi-af",28:"lpf",29:"so-lpf",30:"sk-lpf",31:"bi-lpf",32:"matrix",33:"uni-matrix",34:"so-matrix",35:"sk-matrix",36:"bi-matrix",37:"input",38:"output",39:"rp",40:"fep",41:"ap",42:"fp",43:"te",44:"trail",45:"nc",46:"lc",47:"mc",48:"snc",49:"input_int",50:"output_int",52:"ElementComposition",54:"AssignableRelation",55:"AddLocationTF",56:"AddTypeTTF",57:"colon",59:"semicolon",60:"variavel",61:"comma",63:"l_parenthesis",64:"r_parenthesis",65:"binds",66:"connects",67:"client",68:"maps"},
productions_: [0,[3,2],[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,1],[7,1],[7,1],[7,1],[8,1],[8,1],[8,1],[8,1],[9,1],[9,1],[9,1],[9,1],[10,1],[10,1],[10,1],[10,1],[10,1],[13,1],[13,1],[14,1],[14,1],[14,1],[14,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[18,1],[18,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[51,4],[58,1],[58,3],[53,7],[62,1],[62,1],[62,1],[62,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 53:newElement($$[$0-3]);
break;
case 54:newVariable(this.$);
break;
case 55:newVariable($$[$0-2]);
break;
case 56:newSimpleRelation($$[$0-6],$$[$0-4],$$[$0-2]);
break;
}
},
table: [{3:1,4:2,6:9,7:11,8:12,9:13,10:14,11:[1,15],12:[1,16],13:17,14:18,15:19,16:[1,20],17:[1,21],18:22,19:[1,23],20:[1,28],21:[1,29],22:[1,30],23:[1,31],24:[1,32],25:[1,33],26:[1,34],27:[1,35],28:[1,36],29:[1,37],30:[1,38],31:[1,39],32:[1,40],33:[1,41],34:[1,42],35:[1,43],36:[1,44],37:[1,45],38:[1,46],39:[1,47],40:[1,48],41:[1,49],42:[1,50],43:[1,51],44:[1,52],45:[1,53],46:[1,54],47:[1,55],48:[1,56],49:[1,57],50:[1,58],51:3,52:[1,4],53:5,54:[1,6],55:[1,7],56:[1,8],62:10,65:[1,24],66:[1,25],67:[1,26],68:[1,27]},{1:[3]},{3:60,4:2,5:[1,59],6:9,7:11,8:12,9:13,10:14,11:[1,15],12:[1,16],13:17,14:18,15:19,16:[1,20],17:[1,21],18:22,19:[1,23],20:[1,28],21:[1,29],22:[1,30],23:[1,31],24:[1,32],25:[1,33],26:[1,34],27:[1,35],28:[1,36],29:[1,37],30:[1,38],31:[1,39],32:[1,40],33:[1,41],34:[1,42],35:[1,43],36:[1,44],37:[1,45],38:[1,46],39:[1,47],40:[1,48],41:[1,49],42:[1,50],43:[1,51],44:[1,52],45:[1,53],46:[1,54],47:[1,55],48:[1,56],49:[1,57],50:[1,58],51:3,52:[1,4],53:5,54:[1,6],55:[1,7],56:[1,8],62:10,65:[1,24],66:[1,25],67:[1,26],68:[1,27]},{5:[2,47],11:[2,47],12:[2,47],16:[2,47],17:[2,47],19:[2,47],20:[2,47],21:[2,47],22:[2,47],23:[2,47],24:[2,47],25:[2,47],26:[2,47],27:[2,47],28:[2,47],29:[2,47],30:[2,47],31:[2,47],32:[2,47],33:[2,47],34:[2,47],35:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[2,47],42:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[2,47],49:[2,47],50:[2,47],52:[2,47],54:[2,47],55:[2,47],56:[2,47],65:[2,47],66:[2,47],67:[2,47],68:[2,47]},{5:[2,48],11:[2,48],12:[2,48],16:[2,48],17:[2,48],19:[2,48],20:[2,48],21:[2,48],22:[2,48],23:[2,48],24:[2,48],25:[2,48],26:[2,48],27:[2,48],28:[2,48],29:[2,48],30:[2,48],31:[2,48],32:[2,48],33:[2,48],34:[2,48],35:[2,48],36:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],41:[2,48],42:[2,48],43:[2,48],44:[2,48],45:[2,48],46:[2,48],47:[2,48],48:[2,48],49:[2,48],50:[2,48],52:[2,48],54:[2,48],55:[2,48],56:[2,48],65:[2,48],66:[2,48],67:[2,48],68:[2,48]},{5:[2,49],11:[2,49],12:[2,49],16:[2,49],17:[2,49],19:[2,49],20:[2,49],21:[2,49],22:[2,49],23:[2,49],24:[2,49],25:[2,49],26:[2,49],27:[2,49],28:[2,49],29:[2,49],30:[2,49],31:[2,49],32:[2,49],33:[2,49],34:[2,49],35:[2,49],36:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],42:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49],49:[2,49],50:[2,49],52:[2,49],54:[2,49],55:[2,49],56:[2,49],65:[2,49],66:[2,49],67:[2,49],68:[2,49]},{5:[2,50],11:[2,50],12:[2,50],16:[2,50],17:[2,50],19:[2,50],20:[2,50],21:[2,50],22:[2,50],23:[2,50],24:[2,50],25:[2,50],26:[2,50],27:[2,50],28:[2,50],29:[2,50],30:[2,50],31:[2,50],32:[2,50],33:[2,50],34:[2,50],35:[2,50],36:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],41:[2,50],42:[2,50],43:[2,50],44:[2,50],45:[2,50],46:[2,50],47:[2,50],48:[2,50],49:[2,50],50:[2,50],52:[2,50],54:[2,50],55:[2,50],56:[2,50],65:[2,50],66:[2,50],67:[2,50],68:[2,50]},{5:[2,51],11:[2,51],12:[2,51],16:[2,51],17:[2,51],19:[2,51],20:[2,51],21:[2,51],22:[2,51],23:[2,51],24:[2,51],25:[2,51],26:[2,51],27:[2,51],28:[2,51],29:[2,51],30:[2,51],31:[2,51],32:[2,51],33:[2,51],34:[2,51],35:[2,51],36:[2,51],37:[2,51],38:[2,51],39:[2,51],40:[2,51],41:[2,51],42:[2,51],43:[2,51],44:[2,51],45:[2,51],46:[2,51],47:[2,51],48:[2,51],49:[2,51],50:[2,51],52:[2,51],54:[2,51],55:[2,51],56:[2,51],65:[2,51],66:[2,51],67:[2,51],68:[2,51]},{5:[2,52],11:[2,52],12:[2,52],16:[2,52],17:[2,52],19:[2,52],20:[2,52],21:[2,52],22:[2,52],23:[2,52],24:[2,52],25:[2,52],26:[2,52],27:[2,52],28:[2,52],29:[2,52],30:[2,52],31:[2,52],32:[2,52],33:[2,52],34:[2,52],35:[2,52],36:[2,52],37:[2,52],38:[2,52],39:[2,52],40:[2,52],41:[2,52],42:[2,52],43:[2,52],44:[2,52],45:[2,52],46:[2,52],47:[2,52],48:[2,52],49:[2,52],50:[2,52],52:[2,52],54:[2,52],55:[2,52],56:[2,52],65:[2,52],66:[2,52],67:[2,52],68:[2,52]},{57:[1,61]},{63:[1,62]},{57:[2,3]},{57:[2,4]},{57:[2,5]},{57:[2,6]},{57:[2,7]},{57:[2,8]},{57:[2,9]},{57:[2,10]},{57:[2,11]},{57:[2,12]},{57:[2,13]},{57:[2,14]},{57:[2,15]},{63:[2,57]},{63:[2,58]},{63:[2,59]},{63:[2,60]},{57:[2,16]},{57:[2,17]},{57:[2,18]},{57:[2,19]},{57:[2,20]},{57:[2,21]},{57:[2,22]},{57:[2,23]},{57:[2,24]},{57:[2,25]},{57:[2,26]},{57:[2,27]},{57:[2,28]},{57:[2,29]},{57:[2,30]},{57:[2,31]},{57:[2,32]},{57:[2,33]},{57:[2,34]},{57:[2,35]},{57:[2,36]},{57:[2,37]},{57:[2,38]},{57:[2,39]},{57:[2,40]},{57:[2,41]},{57:[2,42]},{57:[2,43]},{57:[2,44]},{57:[2,45]},{57:[2,46]},{1:[2,1]},{1:[2,2]},{58:63,60:[1,64]},{60:[1,65]},{59:[1,66]},{59:[2,54],61:[1,67]},{61:[1,68]},{5:[2,53],11:[2,53],12:[2,53],16:[2,53],17:[2,53],19:[2,53],20:[2,53],21:[2,53],22:[2,53],23:[2,53],24:[2,53],25:[2,53],26:[2,53],27:[2,53],28:[2,53],29:[2,53],30:[2,53],31:[2,53],32:[2,53],33:[2,53],34:[2,53],35:[2,53],36:[2,53],37:[2,53],38:[2,53],39:[2,53],40:[2,53],41:[2,53],42:[2,53],43:[2,53],44:[2,53],45:[2,53],46:[2,53],47:[2,53],48:[2,53],49:[2,53],50:[2,53],52:[2,53],54:[2,53],55:[2,53],56:[2,53],65:[2,53],66:[2,53],67:[2,53],68:[2,53]},{58:69,60:[1,64]},{60:[1,70]},{59:[2,55]},{64:[1,71]},{59:[1,72]},{5:[2,56],11:[2,56],12:[2,56],16:[2,56],17:[2,56],19:[2,56],20:[2,56],21:[2,56],22:[2,56],23:[2,56],24:[2,56],25:[2,56],26:[2,56],27:[2,56],28:[2,56],29:[2,56],30:[2,56],31:[2,56],32:[2,56],33:[2,56],34:[2,56],35:[2,56],36:[2,56],37:[2,56],38:[2,56],39:[2,56],40:[2,56],41:[2,56],42:[2,56],43:[2,56],44:[2,56],45:[2,56],46:[2,56],47:[2,56],48:[2,56],49:[2,56],50:[2,56],52:[2,56],54:[2,56],55:[2,56],56:[2,56],65:[2,56],66:[2,56],67:[2,56],68:[2,56]}],
defaultActions: {11:[2,3],12:[2,4],13:[2,5],14:[2,6],15:[2,7],16:[2,8],17:[2,9],18:[2,10],19:[2,11],20:[2,12],21:[2,13],22:[2,14],23:[2,15],24:[2,57],25:[2,58],26:[2,59],27:[2,60],28:[2,16],29:[2,17],30:[2,18],31:[2,19],32:[2,20],33:[2,21],34:[2,22],35:[2,23],36:[2,24],37:[2,25],38:[2,26],39:[2,27],40:[2,28],41:[2,29],42:[2,30],43:[2,31],44:[2,32],45:[2,33],46:[2,34],47:[2,35],48:[2,36],49:[2,37],50:[2,38],51:[2,39],52:[2,40],53:[2,41],54:[2,42],55:[2,43],56:[2,44],57:[2,45],58:[2,46],59:[2,1],60:[2,2],69:[2,55]},
parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};



//javascript code

/*
Set currentLine like this:
currentLine = yylineno;
switch (yystate)
*/

currentLine = 0;
//Global variables used	
 
warning = "";
 
hashVarType = new Array();
hashTypeVar = new Array();
hashRelation= new Array();
hashUsedRelation = new Array();
hashRelation = new Array();

/* Initializing Relations cardinalities */
hashRelation["client"+"layer"+"layer"] = createRelation(0,-1,0,-1);


/* Methods */    
/*
	Put in the hash the variables and verify multi-declarations
*/
function newVariable(variable) {
	//Verify if the variable has been declared already
	if(hashVarType[variable] !== undefined){
		throw new VariableMultiDeclared((currentLine+1),variable);	
	}
	//Put a flag in hash of variables to signal the use
	hashVarType[variable] = 0;
}

/*
	Set the type of declared variables
*/
function newElement(element){
	//For all declared variables 
	for (var variable in hashVarType){
		//if not initialized yet
		if(hashVarType[variable] == 0){
			//set the type for variable
			hashVarType[variable] = element;
			//push the variables in hashType
			if(hashTypeVar[element] === undefined){
				hashTypeVar[element] = [];
			}
			hashTypeVar[element].push(variable);
		}		
	}
}

/*
	Create a internal relation: source relation target
*/
function newSimpleRelation(relation, source, target){
	verifyDelclaredVariable(source);
	verifyDelclaredVariable(target);
	//source and target are valid variables
	
	var sourceType = hashVarType[source];
	var targetType = hashVarType[target];
	
	//Verify relationship possibility
	if(hashRelation[relation+sourceType+targetType] === undefined){
		throw new WrongRelation(currentLine+1);
	}
	
	//Create relationship
	if(hashUsedRelation[relation+sourceType+targetType] === undefined){
		//first case, initialize
		hashUsedRelation[relation+sourceType+targetType] = [];
	}
	//add current relationship to hashUsedRelation
	hashUsedRelation[relation+sourceType+targetType].push(createRelationship(source, relation, target));
	
	//Verify cardinality possibility
	var relationshipDefined = hashRelation[relation+sourceType+targetType];
	
	var srcMin = 0, srcMax = 0, trgMin = 0, trgMin = 0;
	
	//for all relationships of the tuple {relation, sourceType, targetType}
	for(var relationship in hashUsedRelation[relation+sourceType+targetType]){
		//source cardinality verification
		
	}
	
}


/* Private Functions */
//Verify if the variable has been declared already
function verifyDelclaredVariable(variable){
	if(hashVarType[variable] === undefined){
		throw new VariableNotDeclared((currentLine+1),variable);	
	}
}

function createRelation(srcMin, srcMax, trgMin, trgMax){
	this.srcMin = srcMin;
	this.srcMax = srcMax;
	this.trgMin = trgMin;
	this.trgMax = trgMax;
}

function createRelationship(source, relation, target){
	this.source = source;
	this.relation = relation;
	this.target = target;
}

/* Exceptions */

//An variable was multi-declared
function VariableMultiDeclared(line, variable) {
   this.message = "Line "+line+": The variable "+variable+" was  multi-declared";
}

//An variable was not declared
function VariableNotDeclared(line, variable) {
   this.message = "Line "+line+": The variable "+variable+" was  not declared";
}

//An wrong relation was used
function WrongRelation(line){
	this.message = "Line "+(currentLine+1)+": Variable type not supported at function";		
}







/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str,hash){if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

// resets the lexer, sets new input
setInput:function (input){this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

// consumes and returns one char from the input
input:function (){var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

// unshifts one char (or a string) into the input
unput:function (ch){var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]}this.yyleng=this.yytext.length;return this},

// When called from action, caches matched text and appends it on next action
more:function (){this._more=true;return this},

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function (){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

// retain first n characters of the match
less:function (n){this.unput(this.match.slice(n))},

// displays already matched input, i.e. for error messages
pastInput:function (){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

// displays upcoming input, i.e. for error messages
upcomingInput:function (){var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function (){var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match,indexed_rule){var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}return false},

// return next match in input
next:function (){if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

// return next match that has a token
lex:function lex(){var r=this.next();if(r){return r}else{return this.lex()}},

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition){this.conditionStack.push(condition)},

// pop the previously active lexer condition state off the condition stack
popState:function popState(){var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n){n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

// alias for begin(condition)
pushState:function pushState(condition){this.begin(condition)},

// return the number of states currently on the stack
stateStackSize:function stateStackSize(){return this.conditionStack.length},
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 20
break;
case 2:return 21
break;
case 3:return 22
break;
case 4:return 23
break;
case 5:return 24
break;
case 6:return 25
break;
case 7:return 26
break;
case 8:return 27
break;
case 9:return 28
break;
case 10:return 29
break;
case 11:return 30
break;
case 12:return 31
break;
case 13:return 32
break;
case 14:return 33	
break;
case 15:return 34
break;
case 16:return 35
break;
case 17:return 36
break;
case 18:return 11
break;
case 19:return 12
break;
case 20:return 37
break;
case 21:return 38
break;
case 22:return 39
break;
case 23:return 40
break;
case 24:return 41
break;
case 25:return 42
break;
case 26:return 43
break;
case 27:return 44
break;
case 28:return 45
break;
case 29:return 46
break;
case 30:return 47
break;
case 31:return 48
break;
case 32:return 16
break;
case 33:return 17
break;
case 34:return 49
break;
case 35:return 50
break;
case 36:return 19
break;
case 37:return 65
break;
case 38:return 66
break;
case 39:return 67
break;
case 40:return 68
break;
case 41:return 'location'
break;
case 42:return 'type'
break;
case 43:return 57
break;
case 44:return 'dot'
break;
case 45:return 59
break;
case 46:return 'equal'
break;
case 47:return 61
break;
case 48:return 'l_curly_bracket'
break;
case 49:return 'r_curly_bracket'
break;
case 50:return 63
break;
case 51:return 64
break;
case 52:return 'graus'
break;
case 53:return 60
break;
case 54:return 'n_int'
break;
case 55:/* ignore */
break;
case 56:return 5
break;
case 57:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:tf\b)/,/^(?:so-tf\b)/,/^(?:sk-tf\b)/,/^(?:bi-tf\b)/,/^(?:af\b)/,/^(?:so-af\b)/,/^(?:sk-af\b)/,/^(?:bi-af\b)/,/^(?:lpf\b)/,/^(?:so-lpf\b)/,/^(?:sk-lpf\b)/,/^(?:bi-lpf\b)/,/^(?:matrix\b)/,/^(?:uni-matrix\b)/,/^(?:so-matrix\b)/,/^(?:sk-matrix\b)/,/^(?:bi-matrix\b)/,/^(?:sn\b)/,/^(?:pm\b)/,/^(?:input\b)/,/^(?:output\b)/,/^(?:rp\b)/,/^(?:fep\b)/,/^(?:ap\b)/,/^(?:fp\b)/,/^(?:te\b)/,/^(?:trail\b)/,/^(?:nc\b)/,/^(?:lc\b)/,/^(?:mc\b)/,/^(?:snc\b)/,/^(?:layer\b)/,/^(?:equip\b)/,/^(?:input_int\b)/,/^(?:output_int\b)/,/^(?:site\b)/,/^(?:binds\b)/,/^(?:connects\b)/,/^(?:client\b)/,/^(?:maps\b)/,/^(?:location\b)/,/^(?:type\b)/,/^(?::)/,/^(?:\.)/,/^(?:;)/,/^(?:=)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:(-)?[0-9]+:[0-9]+:[0-9]+)/,/^(?:[A-Za-z_]+[0-9A-Za-z_]*)/,/^(?:[0-9]+)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}