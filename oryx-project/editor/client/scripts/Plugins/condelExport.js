if(!ORYX.Plugins)	ORYX.Plugins = new Object();/** * Enables exporting current model in Condel format. */ORYX.Plugins.condelExport = ORYX.Plugins.AbstractPlugin.extend({		construct: function() {		arguments.callee.$.construct.apply(this, arguments);				this.facade.offer({			'name'				: ORYX.I18N.condelExport.name,			'functionality'		: this.exportCondel.bind(this),			'group'				: ORYX.I18N.condelExport.group,            'icon'				: ORYX.PATH + "images/disk.png",			'description'		: ORYX.I18N.condelExport.desc,			'index'				: 2,			'minShape'			: 0,			'maxShape'			: 0		});			},	//main function	exportCondel: function() {		//calling the function to return de .condel string		var condel = this.getSerializedCondel();				name = "newEquipment";				//var json = this.facade.getSerializedJSON();		//this.openDownloadWindow(name + ".txt", teste);		//this.openDownloadWindow(name + ".json", json);		this.openDownloadWindow( name + ".condel", condel);			},		//this recursive function traverses the json structure and generates a new structure containing:	//		an array for classes	//		an array for relations	//		an array for all elements (classes and relations) indexed by Json resourceId	//this function receives as arguments 	//		a structure containing the arrays above	//		the actual childShape	//		a string containing the Json resourceId of the previous childShape	getAllElements: function(elements, childShapes, insideOf) {		//create the structure in the first call		if(!Array.isArray(elements)){			elements = new Array();		}		if(!Array.isArray(elements['condelClasses'])){			elements['condelClasses'] = new Array();		}		if(!Array.isArray(elements['condelRelations'])){			elements['condelRelations'] = new Array();		}		if(!Array.isArray(elements['hashElements'])){			elements['hashElements'] = new Array();		}				//traverses all childShapes		//primeiro coleto todos os elementos (classes e relations) e agrupo por tipo para que a declaracao seja feita em blocos		for(var i=0; i<childShapes.length; i++){			//get the stencil id (eg: Layer Network, TTF, Binds...)			var typeName = childShapes[i]['stencil']['id'];			typeName = typeName.replace(" ","_");//normalizes the name according to Condel						//creates an element with the importants attributes			var element = new Object();			element['resourceId'] = childShapes[i]['resourceId'];			element['name'] = childShapes[i]['properties']['typeName'];			element['typeName'] = typeName;						//verifies if the element is a relation			if(this.isACondelRelation(typeName)){				//all relations are grouped by its types (Binds, Clients...)				//if it is the first element of a type, creates a new array for this type				if(!Array.isArray(elements['condelRelations'][typeName])){					elements['condelRelations'][typeName] = new Array();				}								//defines the Json resourceId target for this relation				if(childShapes[i]['outgoing'].length > 0){					element['to'] = childShapes[i]['outgoing'][0]['resourceId'];				}				 				//add this element in the array of relations				elements['condelRelations'][typeName].push(element);							}else{				//all classes are grouped by its types (Layer Network, TTF, AF...)				//if it is the first element of a type, creates a new array for this type				if(!Array.isArray(elements['condelClasses'][typeName])){					elements['condelClasses'][typeName] = new Array();				}									//add this element in the array of classes				elements['condelClasses'][typeName].push(element);								//verifies all relations that has the source in this class				for(var j=0; j < childShapes[i]['outgoing'].length; j++){					//get the Json resourceId of the relation					var outgoingResourceId = childShapes[i]['outgoing'][j]['resourceId'];										//if its necessary, create an object inside the hash array to storage the relation					if(!(outgoingResourceId in elements['hashElements'])){						elements['hashElements'][outgoingResourceId] = new Object();					}										//insert the actual class as the source class of the relation					//inside the hash array					elements['hashElements'][outgoingResourceId]['from'] = element['resourceId']; 				}								if(insideOf != ""){					if(!Array.isArray(elements['hashElements'][insideOf])){						elements['hashElements'][insideOf]['composedBy'] = new Array();					}											elements['hashElements'][insideOf]['composedBy'].push(element['resourceId']);				}			}						//all elements are storaged in the hash array			//verifies if the element already exists before to insert			if(elements['hashElements'][element['resourceId']] === undefined){				elements['hashElements'][element['resourceId']] = element;			}else{				elements['hashElements'][element['resourceId']]['resourceId'] = element['resourceId'];				elements['hashElements'][element['resourceId']]['name'] = element['name'];				elements['hashElements'][element['resourceId']]['to'] = element['to'];							}			 			//call the function recursively to get all sub childShapes			if(childShapes[i]['childShapes'].length > 0){				this.getAllElements(elements, childShapes[i]['childShapes'], childShapes[i]['resourceId']);			}					}	},		//this function generate a string containing all condel syntax	getSerializedCondel: function() {		//get the json structure		var canvas = this.facade.getJSON();		var condel = "";		var elements = new Array();				//feeds elements structure with the classes and relations		this.getAllElements(elements, canvas['childShapes'], "");				//here is build the declaration of classes		for(typeName in elements['condelClasses']){			//verify if exists typeName index in array			if(!(elements['condelClasses'][typeName][0] === undefined)){				//start the line with the typeName				condel += typeName;			}						//iterate for all elements of this typeName			for(var j=0; j<elements['condelClasses'][typeName].length; j++){				//verify if exists typeName index in array				if(!(elements['condelClasses'][typeName][j] === undefined)){					//set an id for this element, in order to generate a variable name					elements['condelClasses'][typeName][j]['id'] = j;										//generate the variable concatenating the typename and the id					condel += " "+typeName.toLowerCase()+j;										//if it is the last element, put a ";", else put a ","					if(j+1 < elements['condelClasses'][typeName].length){						condel += ",";					}else{						condel += ";\n";					}									}			}					}				//here is build the relationships		for(typeName in elements['condelRelations']){			//iterate for all elements of this typeName			for(var j=0; j<elements['condelRelations'][typeName].length; j++){				//verify if exists typeName index in array				if(!(elements['condelRelations'][typeName][j] === undefined)){					//get the resourceId of the relation					var relResourceId = elements['condelRelations'][typeName][j]['resourceId'];										//get the resourceId of the source class					var sourceResourceId = elements['hashElements'][relResourceId]['from'];					//get the resourceId of the target class					var toResourceId = elements['hashElements'][relResourceId]['to'];										//generate the variable name of the source class					var var1 = elements['hashElements'][sourceResourceId]['typeName']+elements['hashElements'][sourceResourceId]['id'];					var1 =  var1.toLowerCase();										//generate the variable name of the target class					var var2 = elements['hashElements'][toResourceId]['typeName']+elements['hashElements'][toResourceId]['id'];					var2 =  var2.toLowerCase();										//put the relationship in the resulting condel code					condel += var1 + " " + typeName + " " + var2 + ";\n";				}							}		}				for(rId in elements['hashElements']){			if(!(elements['hashElements'][rId]['composedBy'] === undefined)){				var var1 = elements['hashElements'][rId]['typeName']+elements['hashElements'][rId]['id'];				var1 =  var1.toLowerCase();				condel += var1				condel += "{"									for(var j=0; j<elements['hashElements'][rId]['composedBy'].length; j++){					if(!(elements['hashElements'][rId]['composedBy'] === undefined)){						partId = elements['hashElements'][rId]['composedBy'][j];												var var2 = elements['hashElements'][partId]['typeName']+elements['hashElements'][partId]['id'];						var2 =  var2.toLowerCase();												condel += var2;												if(j+1 < elements['hashElements'][rId]['composedBy'].length){							condel += ",";						}					}				}								condel += "};"			}		}				return condel;	},		//this function verify if the element type is a condel relation 	isACondelRelation: function(typeName) {		switch(typeName){			case "Binds":			case "Clients":			case "Connects":			case "Transport_Entity":			case "Trail":			case "NC":			case "LC":			case "MC":			case "SNC":				return true;				break;		}		return false;	}	});