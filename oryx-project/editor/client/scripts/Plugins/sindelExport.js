if(!ORYX.Plugins)	ORYX.Plugins = new Object();/** * Transforms a diagram to Sindel Notation */ORYX.Plugins.SINDELExport = ORYX.Plugins.AbstractPlugin.extend({		construct: function() {		arguments.callee.$.construct.apply(this, arguments);			this.facade.offer({			'name'				: ORYX.I18N.SINDELExport.name,			'functionality'		: this.exportSindel.bind(this),			'group'				: ORYX.I18N.SINDELExport.group,            dropDownGroupIcon   : ORYX.PATH + "images/disk.png",			'icon'				: ORYX.PATH + "images/page_white_code.png",			'description'		: ORYX.I18N.SINDELExport.desc,			'index'				: 1,			'minShape'			: 0,			'maxShape'			: 0		});				this.facade.offer({			'name'				: "Sindel's Metamodel",			'functionality'		: this.metamodelSindel.bind(this),			'group'				: "", 			'icon'				: ORYX.PATH + "images/image.png",			'description'		: "Show Sindel's Metamodel",			'index'				: 5,			'minShape'			: 0,			'maxShape'			: 0		});				this.facade.offer({			'name'				: "Export a Equipament",			'functionality'		: this.exportEquipment.bind(this),			'group'				: "Export",			dropDownGroupIcon   : ORYX.PATH + "images/disk.png",			'icon'				: ORYX.PATH + "images/page_white_code.png",			'description'		: "Export a Equipament",			'index'				: 2,			'minShape'			: 0,			'maxShape'			: 0		});			},		exportEquipment: function(){		var equip = "New Equipment";		var name = prompt("Filename");		if(name==null)		  return;		if(name=="")			name="newEquipment";		this.openDownloadWindow( name + ".equip", equip);	},	metamodelSindel: function(){	        var dialog = new Ext.Window({            autoCreate: true,            layout: 'fit',            plain: true,            bodyStyle: 'padding:5px;',            title: "Sindel's Metamodel",            height: 500,            width: 700,            modal: true,            fixedcenter: true,            shadow: true,            proxyDrag: true,            resizable: true,			items: [{				html:   '<ul class="slides">' +												'<input type="radio" name="radio-btn" id="img-1" checked="checked" />'+					    '<li class="slide-container">'+					    '<div class="slide"> <img src="images/mm1.png" /> </div>'+					    '<div class="nav"> <label for="img-1" class="prev">&#x2039;</label>	<label for="img-2" class="next">&#x203a;</label>		</div>'+					    '</li>'+											    '<input type="radio" name="radio-btn" id="img-2" checked="checked" />'+					    '<li class="slide-container">'+					    '<div class="slide"> <img src="images/mm2.png" /> </div>'+					    '<div class="nav"> <label for="img-1" class="prev">&#x2039;</label>	<label for="img-3" class="next">&#x203a;</label>		</div>'+					    '</li>'+					    						'<input type="radio" name="radio-btn" id="img-3" checked="checked" />'+					    '<li class="slide-container">'+					    '<div class="slide"> <img src="images/mm3.png" /> </div>'+					    '<div class="nav"> <label for="img-2" class="prev">&#x2039;</label>	<label for="img-4" class="next">&#x203a;</label>		</div>'+					    '</li>'+					    					    '<input type="radio" name="radio-btn" id="img-4" checked="checked" />'+					    '<li class="slide-container">'+					    '<div class="slide"> <img src="images/mm4.png" /> </div>'+					    '<div class="nav"> <label for="img-3" class="prev">&#x2039;</label>	<label for="img-5" class="next">&#x203a;</label>		</div>'+					    '</li>'+					    					    '<input type="radio" name="radio-btn" id="img-5" checked="checked" />'+					    '<li class="slide-container">'+					    '<div class="slide"> <img src="images/mm5.png" /> </div>'+					    '<div class="nav"> <label for="img-4" class="prev">&#x2039;</label>	<label for="img-6" class="next">&#x203a;</label>		</div>'+					    '</li>'+					    					    '<input type="radio" name="radio-btn" id="img-6" checked="checked" />'+					    '<li class="slide-container">'+					    '<div class="slide"> <img src="images/mm6.png" /> </div>'+					    '<div class="nav"> <label for="img-5" class="prev">&#x2039;</label>	<label for="img-7" class="next">&#x203a;</label>		</div>'+					    '</li>'+					    					    '<input type="radio" name="radio-btn" id="img-7" checked="checked" />'+					    '<li class="slide-container">'+					    '<div class="slide"> <img src="images/mm7.png" /> </div>'+					    '<div class="nav"> <label for="img-6" class="prev">&#x2039;</label>	<label for="img-8" class="next">&#x203a;</label>		</div>'+					    '</li>'+					    					    '<input type="radio" name="radio-btn" id="img-8" checked="checked" />'+					    '<li class="slide-container">'+					    '<div class="slide"> <img src="images/mm8.png" /> </div>'+					    '<div class="nav"> <label for="img-7" class="prev">&#x2039;</label>	<label for="img-1" class="next">&#x203a;</label>		</div>'+					    '</li>'+					    					    '</ul>'+					     					    '<style type="text/css"> @import url(http://fonts.googleapis.com/css?family=Varela+Round);  html, body { background: #333 url("http://codepen.io/images/classy_fabric.png"); }  .slides {     padding: 0;     width: 609px;     height: 420px;     display: block;     margin: 0 auto;     position: relative; }  .slides * {     user-select: none;     -ms-user-select: none;     -moz-user-select: none;     -khtml-user-select: none;     -webkit-user-select: none;     -webkit-touch-callout: none; }  .slides input { display: none; }  .slide-container { display: block; }  .slide {     top: 0;     opacity: 0;     width: 609px;     height: 420px;     display: block;     position: absolute;      transform: scale(0);      transition: all .7s ease-in-out; }  .slide img {     width: 100%;     height: 100%; }  .nav label {  height: 100%;     display: none;     position: absolute;  	  opacity: 0;     z-index: 9;     cursor: pointer;      transition: opacity .2s;      color: #FFF;     font-size: 156pt;     text-align: right;     line-height: 380px;     font-family: "Varela Round", sans-serif;    text-shadow: 0px 0px 15px rgb(119, 119, 119); }  .slide:hover + .nav label { opacity: 0.5; }  .nav label:hover { opacity: 1; }  .nav .next { right: 0; }  input:checked + .slide-container  .slide {     opacity: 1;      transform: scale(1);      transition: opacity 1s ease-in-out; }  input:checked + .slide-container .nav label { display: block; }  .nav-dots { 	width: 100%; 	bottom: 9px; 	height: 11px; 	display: block; 	position: absolute; 	text-align: center; }  .nav-dots .nav-dot { 	top: -5px; 	width: 11px; 	height: 11px; 	margin: 0 4px; 	position: relative; 	border-radius: 100%; 	display: inline-block; 	background-color: rgba(0, 0, 0, 0.6); }  .nav-dots .nav-dot:hover { 	cursor: pointer; 	background-color: rgba(0, 0, 0, 0.8); }  input#img-1:checked ~ .nav-dots label#img-dot-1, input#img-2:checked ~ .nav-dots label#img-dot-2, input#img-3:checked ~ .nav-dots label#img-dot-3, input#img-4:checked ~ .nav-dots label#img-dot-4, input#img-5:checked ~ .nav-dots label#img-dot-5, input#img-6:checked ~ .nav-dots label#img-dot-6 { 	background: rgba(0, 0, 0, 0.8); }</style>'				}]        });                dialog.show();	},				//main function	exportSindel: function() {				//calling the function to return de .sindel string		var sindel = this.getSerializedSindel();		var name = prompt("Filename");		var graphCoordenates = this.informGraphCoord();		if(name==null)		  return;		if(name=="")			name="newEquipment";		sindel += graphCoordenates;		this.openDownloadWindow( name + ".sindel", sindel);			},		//this recursive function traverses the json structure and generates a new structure containing:	//		an array for classes	//		an array for relations	//		an array for all elements (classes and relations) indexed by Json resourceId	//this function receives as arguments 	//		a structure containing the arrays above	//		the actual childShape	//		a string containing the Json resourceId of the previous childShape	getAllElements: function(elements, childShapes, insideOf) {		//create the structure in the first call		if(!Array.isArray(elements)){			elements = new Array();		}		if(!Array.isArray(elements['sindelClasses'])){			elements['sindelClasses'] = new Array();		}		if(!Array.isArray(elements['sindelRelations'])){			elements['sindelRelations'] = new Array();		}		if(!Array.isArray(elements['hashElements'])){			elements['hashElements'] = new Array();		}				var sindelElementNames = new Array();		this.initSindelElementNames(sindelElementNames);				//traverses all childShapes		//primeiro coleto todos os elementos (classes e relations) e agrupo por tipo para que a declaracao seja feita em blocos		for(var i=0; i<childShapes.length; i++){			//alert("name: "+childShapes[i]['properties']['name']);			//get the stencil id (eg: Layer Network, TTF, Binds...)			var typeName = childShapes[i]['stencil']['id'];			//typeName = typeName.replace(" ","_");//normalizes the name according to Sindel						if(sindelElementNames[typeName] === undefined){				alert("The stencil " + typeName + " has no equivalent mapping in Sindel.");			}else{				typeName = sindelElementNames[typeName];			}						//creates an element with the importants attributes			var element = new Object();			element['resourceId'] = childShapes[i]['resourceId'];			element['typeName'] = typeName;			element['upperLeft_x'] = childShapes[i]['bounds']['upperLeft']['x'];			element['upperLeft_y'] = childShapes[i]['bounds']['upperLeft']['y'];			element['lowerRight_x'] = childShapes[i]['bounds']['lowerRight']['x'];			element['lowerRight_y'] = childShapes[i]['bounds']['lowerRight']['y'];							//get the name property			if(!(childShapes[i]['properties']['typeName'] === undefined)){				element['name'] = childShapes[i]['properties']['typeName'];			}else if(!(childShapes[i]['properties']['name'] === undefined)){				element['name'] = childShapes[i]['properties']['name'];			}else{				element['name'] = "";			}										//get geo location properties			if(!(childShapes[i]['properties']['aliaslocation'] === undefined)){				element['location'] = new Object();								element['location']['latitude degree'] = childShapes[i]['properties']['latitude degree'];				element['location']['latitude minute'] = childShapes[i]['properties']['latitude minute'];				element['location']['latitude second'] = childShapes[i]['properties']['latitude second'];				element['location']['longitude degree'] = childShapes[i]['properties']['longitude degree'];				element['location']['longitude minute'] = childShapes[i]['properties']['longitude minute'];				element['location']['longitude second'] = childShapes[i]['properties']['longitude second'];				element['location']['aliaslocation'] = childShapes[i]['properties']['aliaslocation'];			}						//verifies if the element is a relation			if(this.isASindelRelation(typeName)){				//all relations are grouped by its types (Binds, Clients...)				//if it is the first element of a type, creates a new array for this type				if(!Array.isArray(elements['sindelRelations'][typeName])){					elements['sindelRelations'][typeName] = new Array();				}								//defines the Json resourceId target for this relation				if(childShapes[i]['outgoing'].length > 0){					element['to'] = childShapes[i]['outgoing'][0]['resourceId'];				}				 				// get coordenates of relations				element['r_upperLeft_x'] = childShapes[i]['bounds']['upperLeft']['x'];				element['r_upperLeft_y'] = childShapes[i]['bounds']['upperLeft']['y'];				element['r_lowerRight_x'] = childShapes[i]['bounds']['lowerRight']['x'];				element['r_lowerRight_y'] = childShapes[i]['bounds']['lowerRight']['y'];								//add this element in the array of relations				elements['sindelRelations'][typeName].push(element);							}else{				//all classes are grouped by its types (Layer Network, TTF, AF...)				//if it is the first element of a type, creates a new array for this type				if(!Array.isArray(elements['sindelClasses'][typeName])){					elements['sindelClasses'][typeName] = new Array();				}									//add this element in the array of classes				elements['sindelClasses'][typeName].push(element);								//verifies all relations that has the source in this class				for(var j=0; j < childShapes[i]['outgoing'].length; j++){					//get the Json resourceId of the relation					var outgoingResourceId = childShapes[i]['outgoing'][j]['resourceId'];										//if its necessary, create an object inside the hash array to storage the relation					if(!(outgoingResourceId in elements['hashElements'])){						elements['hashElements'][outgoingResourceId] = new Object();					}										//insert the actual class as the source class of the relation					//inside the hash array					elements['hashElements'][outgoingResourceId]['from'] = element['resourceId']; 				}								//verify if the element is composing another 				if(insideOf != ""){					if(!Array.isArray(elements['hashElements'][insideOf]['composedBy'])){						elements['hashElements'][insideOf]['composedBy'] = new Array();					}						var tam = elements['hashElements'][insideOf]['composedBy'].length;										elements['hashElements'][insideOf]['composedBy'][tam] = element['resourceId'];				}			}						//all elements are storaged in the hash array			//verifies if the element already exists before to insert			if(elements['hashElements'][element['resourceId']] === undefined){				elements['hashElements'][element['resourceId']] = element;			}else{				elements['hashElements'][element['resourceId']]['resourceId'] = element['resourceId'];				elements['hashElements'][element['resourceId']]['name'] = element['name'];				elements['hashElements'][element['resourceId']]['to'] = element['to'];							}			 			//call the function recursively to get all sub childShapes			if(childShapes[i]['childShapes'].length > 0){				this.getAllElements(elements, childShapes[i]['childShapes'], childShapes[i]['resourceId']);			}					}	},			//this function generate a string containing all sindel syntax	getSerializedSindel: function() {		//get the json structure		var canvas = this.facade.getJSON();		var sindel = "";		var elements = new Array();				//feeds elements structure with the classes and relations		this.getAllElements(elements, canvas['childShapes'], "");				//here is build the declaration of classes		for(typeName in elements['sindelClasses']){			//verify if exists typeName index in array			if(!(elements['sindelClasses'][typeName][0] === undefined)){				//start the line with the typeName				sindel += typeName + ": ";			}						//iterate for all elements of this typeName			for(var j=0; j<elements['sindelClasses'][typeName].length; j++){				//verify if exists typeName index in array				if(!(elements['sindelClasses'][typeName][j] === undefined)){					//set an id for this element, in order to generate a variable name					elements['sindelClasses'][typeName][j]['id'] = j;															//generate the variable concatenating the typename and the id					var varName = typeName.toLowerCase()+j;					varName = varName.replace("-","_");					sindel += " "+varName;										//if it is the last element, put a ";", else put a ","					if(j+1 < elements['sindelClasses'][typeName].length){						sindel += ",";					}else{						sindel += ";\n";					}									}			}					}						//here is build the relationships		for(typeName in elements['sindelRelations']){			//iterate for all elements of this typeName			for(var j=0; j<elements['sindelRelations'][typeName].length; j++){				//verify if exists typeName index in array				if(!(elements['sindelRelations'][typeName][j] === undefined)){					//get the resourceId of the relation					var relResourceId = elements['sindelRelations'][typeName][j]['resourceId'];										//get the resourceId of the source class					var sourceResourceId = elements['hashElements'][relResourceId]['from'];					//get the resourceId of the target class					var toResourceId = elements['hashElements'][relResourceId]['to'];										//generate the variable name of the source class					var var1 = elements['hashElements'][sourceResourceId]['typeName']+elements['hashElements'][sourceResourceId]['id'];					var1 = var1.toLowerCase();					var1 = var1.replace("-","_");										//generate the variable name of the target class					var var2 = elements['hashElements'][toResourceId]['typeName']+elements['hashElements'][toResourceId]['id'];					var2 = var2.toLowerCase();					var2 = var2.replace("-","_");										//put the relationship in the resulting sindel code					//sindel += typeName + "(" + var1 + "," + var2 + ");\n";										if(typeName == "part-whole"){						if(this.isTranspFunctOrEquip(var1) ){ 			//If it is TF ou um Equipment, invert							sindel += var1 + "{" + var2 + "};\n";						}else{							sindel += var2 + "{" + var1 + "};\n";		//If isn't a TF ou um Equipment						}					}else{						//put the relationship in the resulting sindel code						sindel += typeName + "(" + var1 + "," + var2 + ");\n";					}									}			}		}				//here is built the element composition		for(rId in elements['hashElements']){			//verify if the element is composed			if(!(elements['hashElements'][rId]['composedBy'] === undefined)){				//build the variable name of the composed element 				var var1 = elements['hashElements'][rId]['typeName']+elements['hashElements'][rId]['id'];				var1 =  var1.toLowerCase();				var1 = var1.replace("-","_");				sindel += var1				sindel += "{"									//get all composing elements				for(var j=0; j<elements['hashElements'][rId]['composedBy'].length; j++){					if(!(elements['hashElements'][rId]['composedBy'] === undefined)){						partId = elements['hashElements'][rId]['composedBy'][j];												//build the variable name of the composing elements						var var2 = elements['hashElements'][partId]['typeName']+elements['hashElements'][partId]['id'];						var2 = var2.toLowerCase();						var2 = var2.replace("-","_");												sindel += var2;												if(j+1 < elements['hashElements'][rId]['composedBy'].length){							sindel += ",";						}					}				}								sindel += "};\n"			}		}				return sindel;	},		informGraphCoord: function(){		var canvas = this.facade.getJSON();		var sindel = "";		var elements = new Array();				//feeds elements structure with the classes and relations		this.getAllElements(elements, canvas['childShapes'], "");				sindel += "\n\n"+				"|====================================================================|\n"+				"|                       Information Graph Coordinates                |\n"+				"|====================================================================|\n\n";					//Iterate all classes			for(typeName in elements['sindelClasses']){											//iterate for all elements of this typeName				for(var j=0; j<elements['sindelClasses'][typeName].length; j++){					//verify if exists typeName index in array					if(!(elements['sindelClasses'][typeName][j] === undefined)){						//set an id for this element, in order to generate a variable name						elements['sindelClasses'][typeName][j]['id'] = j;												// Write in the sindel export						var varName = typeName.toLowerCase()+j;						varName = varName.replace("-","_");						sindel += varName + " : ";						sindel += "  lowerRight {" + elements['sindelClasses'][typeName][j]['lowerRight_x']+ " , " 									+ elements['sindelClasses'][typeName][j]['lowerRight_y'] + "} , "+									"upperLeft {" + elements['sindelClasses'][typeName][j]['upperLeft_x']+ " , " 									+ elements['sindelClasses'][typeName][j]['upperLeft_y'] + "}\n";								}				}			}						//Iterate all relations				for(typeName in elements['sindelRelations']){				//iterate for all elements of this typeName				for(var j=0; j<elements['sindelRelations'][typeName].length; j++){					//verify if exists typeName index in array					if(!(elements['sindelRelations'][typeName][j] === undefined)){						// Write in the sindel export						sindel += typeName;						sindel += "  lowerRight {" + elements['sindelRelations'][typeName][j]['r_lowerRight_x']+ " , " 									+ elements['sindelRelations'][typeName][j]['r_lowerRight_y'] + "} , "+									"upperLeft {" + elements['sindelRelations'][typeName][j]['r_upperLeft_x']+ " , " 									+ elements['sindelRelations'][typeName][j]['r_upperLeft_y'] + "}\n";					}				}			}						return sindel;	},		//Verify if the element is a Transport Function or a Equipment	isTranspFunctOrEquip: function(typeName){		if(typeName.indexOf("sn")!= -1 || typeName.indexOf("lpf")!= -1 || typeName.indexOf("matrix")!= -1				|| typeName.indexOf("pm")!= -1 || typeName.indexOf("af")!= -1 || typeName.indexOf("tf")!= -1						|| typeName.indexOf("equip")!= -1){			return true;		}		else			return false;	},		//this function verify if the element type is a sindel relation 	isASindelRelation: function(typeName) {		switch(typeName){			case "binds":			case "clients":			case "connects":			case "maps":			case "te":			case "ate":			case "nc":			case "lc":			case "mc":			case "cfte":			case "part-whole":				return true;				break;		}		return false;	},		initSindelElementNames: function(sindelElementNames){		//Termination Functions		sindelElementNames['TF'] = 'tf';//		sindelElementNames['Source TF'] = 'so-tf';//		sindelElementNames['Sink TF'] = 'sk-tf';//		sindelElementNames['Bidirectional TF'] = 'bi-tf';//				//Adaptation Functions		sindelElementNames['AF'] = 'af';//		sindelElementNames['Source AF'] = 'so-af';//		sindelElementNames['Sink AF'] = 'sk-af';//		sindelElementNames['Bidirectional AF'] = 'bi-af';//				//Layer Processor Functions		sindelElementNames['LPF'] = 'lpf';//		sindelElementNames['Source LPF'] = 'so-lpf';//		sindelElementNames['Sink LPF'] = 'sk-lpf';//		sindelElementNames['Bidirectional LPF'] = 'bi-lpf';//				//Matrices		sindelElementNames['Matrix'] = 'matrix';		sindelElementNames['Unidirectional Matrix'] = 'uni-matrix';//		sindelElementNames['Source Matrix'] = 'so-matrix';//		sindelElementNames['Sink Matrix'] = 'sk-matrix';//		sindelElementNames['Bidirectional Matrix'] = 'bi-matrix';//				//Subnetwork		sindelElementNames['Subnetwork'] = 'sn';//				//Physical Media		sindelElementNames['Physical Media'] = 'pm';//				//Ports		sindelElementNames['Input'] = 'input';//		sindelElementNames['Output'] = 'output';//				//Reference Points		sindelElementNames['Reference_Point'] = 'rp';		sindelElementNames['FEP'] = 'fep';//		sindelElementNames['AP'] = 'ap';//		sindelElementNames['FP'] = 'fp';//				//Transport Entities		sindelElementNames['Transport Entity'] = 'te';//		sindelElementNames['ATE'] = 'ate';//		sindelElementNames['NC'] = 'nc';//		sindelElementNames['LC'] = 'lc';//		sindelElementNames['MC'] = 'mc';		sindelElementNames['CFTE'] = 'cfte';//				//Layer Network		sindelElementNames['Layer Network'] = 'layer';//				//Equipment		sindelElementNames['Equipment'] = 'equip';//				//Equipment Module		sindelElementNames['Equipment'] = 'equipMod';//				//Interfaces		sindelElementNames['Input Interface'] = 'in_int';//		sindelElementNames['Output Interface'] = 'out_int';//				//Site		sindelElementNames['Site'] = 'site';//				//Simple Relation		sindelElementNames['Binds'] = 'binds';//		sindelElementNames['Clients'] = 'clients';//		sindelElementNames['Maps'] = 'maps';//		sindelElementNames['Connects'] = 'connects';//		sindelElementNames['Part-Whole'] = 'part-whole';//	}	});