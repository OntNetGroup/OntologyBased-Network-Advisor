/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace(){},
yy: {},
symbols_: {"error":2,"expressions":3,"Instruction":4,"EOF":5,"Element":6,"TransportFunction":7,"AdaptationFunction":8,"LayerProcessorFunction":9,"Matrices":10,"sn":11,"pm":12,"Port":13,"ReferencePoint":14,"TransportEntity":15,"layer":16,"equip":17,"Interfaces":18,"site":19,"tf":20,"so-tf":21,"sk-tf":22,"bi-tf":23,"af":24,"so-af":25,"sk-af":26,"bi-af":27,"lpf":28,"so-lpf":29,"sk-lpf":30,"bi-lpf":31,"matrix":32,"uni-matrix":33,"so-matrix":34,"sk-matrix":35,"bi-matrix":36,"input":37,"output":38,"rp":39,"fep":40,"ap":41,"fp":42,"ate":43,"nc":44,"lc":45,"mc":46,"cfte":47,"in_int":48,"out_int":49,"ElementDeclaration":50,"ElementComposition":51,"SimpleRelation":52,"AssignableRelation":53,"AddLocationTF":54,"AddTypeTTF":55,"colon":56,"VariableDeclaration":57,"semicolon":58,"variavel":59,"comma":60,"RelationType":61,"l_parenthesis":62,"r_parenthesis":63,"binds":64,"connects":65,"client":66,"maps":67,"str_location":68,"geo_location":69,"dot":70,"location":71,"graus":72,"type":73,"Composition":74,"l_curly_bracket":75,"used_variables":76,"r_curly_bracket":77,"equal":78,"RelationTypeAssignable":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"sn",12:"pm",16:"layer",17:"equip",19:"site",20:"tf",21:"so-tf",22:"sk-tf",23:"bi-tf",24:"af",25:"so-af",26:"sk-af",27:"bi-af",28:"lpf",29:"so-lpf",30:"sk-lpf",31:"bi-lpf",32:"matrix",33:"uni-matrix",34:"so-matrix",35:"sk-matrix",36:"bi-matrix",37:"input",38:"output",39:"rp",40:"fep",41:"ap",42:"fp",43:"ate",44:"nc",45:"lc",46:"mc",47:"cfte",48:"in_int",49:"out_int",56:"colon",58:"semicolon",59:"variavel",60:"comma",62:"l_parenthesis",63:"r_parenthesis",64:"binds",65:"connects",66:"client",67:"maps",70:"dot",71:"location",72:"graus",73:"type",75:"l_curly_bracket",77:"r_curly_bracket",78:"equal"},
productions_: [0,[3,2],[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,1],[7,1],[7,1],[7,1],[8,1],[8,1],[8,1],[8,1],[9,1],[9,1],[9,1],[9,1],[10,1],[10,1],[10,1],[10,1],[10,1],[13,1],[13,1],[14,1],[14,1],[14,1],[14,1],[15,1],[15,1],[15,1],[15,1],[15,1],[18,1],[18,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[50,4],[57,1],[57,3],[52,7],[61,1],[61,1],[61,1],[61,1],[54,1],[54,1],[68,6],[69,10],[55,6],[51,3],[74,3],[76,1],[76,3],[53,9],[79,1],[79,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
currentLine = yylineno;
switch (yystate) {
case 52:newElement($$[$0-3]);
break;
case 53:newVariable(this.$);
break;
case 54:newVariable($$[$0-2]);
break;
case 55:newSimpleRelation($$[$0-6],$$[$0-4],$$[$0-2]);
break;
case 62:addLocationStr($$[$0-5],$$[$0-1]);
break;
case 63:addLocationGeo($$[$0-9],$$[$0-4],$$[$0-2]);
break;
case 64:addType($$[$0-5],$$[$0-1]);
break;
case 65:newElementComposition($$[$0-2]);
break;
case 67:usedVariable(this.$);
break;
case 68:usedVariable($$[$0-2]);
break;
case 69:newAssignableRelation($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2]);
break;
}
},
table: [{3:1,4:2,6:9,7:14,8:15,9:16,10:17,11:[1,18],12:[1,19],13:20,14:21,15:22,16:[1,23],17:[1,24],18:25,19:[1,26],20:[1,31],21:[1,32],22:[1,33],23:[1,34],24:[1,35],25:[1,36],26:[1,37],27:[1,38],28:[1,39],29:[1,40],30:[1,41],31:[1,42],32:[1,43],33:[1,44],34:[1,45],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57],47:[1,58],48:[1,59],49:[1,60],50:3,51:4,52:5,53:6,54:7,55:8,59:[1,10],61:11,64:[1,27],65:[1,28],66:[1,29],67:[1,30],68:12,69:13},{1:[3]},{3:62,4:2,5:[1,61],6:9,7:14,8:15,9:16,10:17,11:[1,18],12:[1,19],13:20,14:21,15:22,16:[1,23],17:[1,24],18:25,19:[1,26],20:[1,31],21:[1,32],22:[1,33],23:[1,34],24:[1,35],25:[1,36],26:[1,37],27:[1,38],28:[1,39],29:[1,40],30:[1,41],31:[1,42],32:[1,43],33:[1,44],34:[1,45],35:[1,46],36:[1,47],37:[1,48],38:[1,49],39:[1,50],40:[1,51],41:[1,52],42:[1,53],43:[1,54],44:[1,55],45:[1,56],46:[1,57],47:[1,58],48:[1,59],49:[1,60],50:3,51:4,52:5,53:6,54:7,55:8,59:[1,10],61:11,64:[1,27],65:[1,28],66:[1,29],67:[1,30],68:12,69:13},{5:[2,46],11:[2,46],12:[2,46],16:[2,46],17:[2,46],19:[2,46],20:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],27:[2,46],28:[2,46],29:[2,46],30:[2,46],31:[2,46],32:[2,46],33:[2,46],34:[2,46],35:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],41:[2,46],42:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46],49:[2,46],59:[2,46],64:[2,46],65:[2,46],66:[2,46],67:[2,46]},{5:[2,47],11:[2,47],12:[2,47],16:[2,47],17:[2,47],19:[2,47],20:[2,47],21:[2,47],22:[2,47],23:[2,47],24:[2,47],25:[2,47],26:[2,47],27:[2,47],28:[2,47],29:[2,47],30:[2,47],31:[2,47],32:[2,47],33:[2,47],34:[2,47],35:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[2,47],42:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[2,47],49:[2,47],59:[2,47],64:[2,47],65:[2,47],66:[2,47],67:[2,47]},{5:[2,48],11:[2,48],12:[2,48],16:[2,48],17:[2,48],19:[2,48],20:[2,48],21:[2,48],22:[2,48],23:[2,48],24:[2,48],25:[2,48],26:[2,48],27:[2,48],28:[2,48],29:[2,48],30:[2,48],31:[2,48],32:[2,48],33:[2,48],34:[2,48],35:[2,48],36:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],41:[2,48],42:[2,48],43:[2,48],44:[2,48],45:[2,48],46:[2,48],47:[2,48],48:[2,48],49:[2,48],59:[2,48],64:[2,48],65:[2,48],66:[2,48],67:[2,48]},{5:[2,49],11:[2,49],12:[2,49],16:[2,49],17:[2,49],19:[2,49],20:[2,49],21:[2,49],22:[2,49],23:[2,49],24:[2,49],25:[2,49],26:[2,49],27:[2,49],28:[2,49],29:[2,49],30:[2,49],31:[2,49],32:[2,49],33:[2,49],34:[2,49],35:[2,49],36:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],42:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49],49:[2,49],59:[2,49],64:[2,49],65:[2,49],66:[2,49],67:[2,49]},{5:[2,50],11:[2,50],12:[2,50],16:[2,50],17:[2,50],19:[2,50],20:[2,50],21:[2,50],22:[2,50],23:[2,50],24:[2,50],25:[2,50],26:[2,50],27:[2,50],28:[2,50],29:[2,50],30:[2,50],31:[2,50],32:[2,50],33:[2,50],34:[2,50],35:[2,50],36:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],41:[2,50],42:[2,50],43:[2,50],44:[2,50],45:[2,50],46:[2,50],47:[2,50],48:[2,50],49:[2,50],59:[2,50],64:[2,50],65:[2,50],66:[2,50],67:[2,50]},{5:[2,51],11:[2,51],12:[2,51],16:[2,51],17:[2,51],19:[2,51],20:[2,51],21:[2,51],22:[2,51],23:[2,51],24:[2,51],25:[2,51],26:[2,51],27:[2,51],28:[2,51],29:[2,51],30:[2,51],31:[2,51],32:[2,51],33:[2,51],34:[2,51],35:[2,51],36:[2,51],37:[2,51],38:[2,51],39:[2,51],40:[2,51],41:[2,51],42:[2,51],43:[2,51],44:[2,51],45:[2,51],46:[2,51],47:[2,51],48:[2,51],49:[2,51],59:[2,51],64:[2,51],65:[2,51],66:[2,51],67:[2,51]},{56:[1,63]},{70:[1,66],74:64,75:[1,67],78:[1,65]},{62:[1,68]},{5:[2,60],11:[2,60],12:[2,60],16:[2,60],17:[2,60],19:[2,60],20:[2,60],21:[2,60],22:[2,60],23:[2,60],24:[2,60],25:[2,60],26:[2,60],27:[2,60],28:[2,60],29:[2,60],30:[2,60],31:[2,60],32:[2,60],33:[2,60],34:[2,60],35:[2,60],36:[2,60],37:[2,60],38:[2,60],39:[2,60],40:[2,60],41:[2,60],42:[2,60],43:[2,60],44:[2,60],45:[2,60],46:[2,60],47:[2,60],48:[2,60],49:[2,60],59:[2,60],64:[2,60],65:[2,60],66:[2,60],67:[2,60]},{5:[2,61],11:[2,61],12:[2,61],16:[2,61],17:[2,61],19:[2,61],20:[2,61],21:[2,61],22:[2,61],23:[2,61],24:[2,61],25:[2,61],26:[2,61],27:[2,61],28:[2,61],29:[2,61],30:[2,61],31:[2,61],32:[2,61],33:[2,61],34:[2,61],35:[2,61],36:[2,61],37:[2,61],38:[2,61],39:[2,61],40:[2,61],41:[2,61],42:[2,61],43:[2,61],44:[2,61],45:[2,61],46:[2,61],47:[2,61],48:[2,61],49:[2,61],59:[2,61],64:[2,61],65:[2,61],66:[2,61],67:[2,61]},{56:[2,3]},{56:[2,4]},{56:[2,5]},{56:[2,6]},{56:[2,7]},{56:[2,8]},{56:[2,9]},{56:[2,10]},{56:[2,11]},{56:[2,12]},{56:[2,13]},{56:[2,14]},{56:[2,15]},{62:[2,56]},{62:[2,57]},{62:[2,58]},{62:[2,59]},{56:[2,16]},{56:[2,17]},{56:[2,18]},{56:[2,19]},{56:[2,20]},{56:[2,21]},{56:[2,22]},{56:[2,23]},{56:[2,24]},{56:[2,25]},{56:[2,26]},{56:[2,27]},{56:[2,28]},{56:[2,29]},{56:[2,30]},{56:[2,31]},{56:[2,32]},{56:[2,33]},{56:[2,34]},{56:[2,35]},{56:[2,36]},{56:[2,37]},{56:[2,38]},{56:[2,39]},{56:[2,40]},{56:[2,41]},{56:[2,42]},{56:[2,43]},{56:[2,44]},{56:[2,45]},{1:[2,1]},{1:[2,2]},{57:69,59:[1,70]},{58:[1,71]},{64:[1,73],65:[1,74],79:72},{71:[1,76],73:[1,75]},{59:[1,78],76:77},{59:[1,79]},{58:[1,80]},{58:[2,53],60:[1,81]},{5:[2,65],11:[2,65],12:[2,65],16:[2,65],17:[2,65],19:[2,65],20:[2,65],21:[2,65],22:[2,65],23:[2,65],24:[2,65],25:[2,65],26:[2,65],27:[2,65],28:[2,65],29:[2,65],30:[2,65],31:[2,65],32:[2,65],33:[2,65],34:[2,65],35:[2,65],36:[2,65],37:[2,65],38:[2,65],39:[2,65],40:[2,65],41:[2,65],42:[2,65],43:[2,65],44:[2,65],45:[2,65],46:[2,65],47:[2,65],48:[2,65],49:[2,65],59:[2,65],64:[2,65],65:[2,65],66:[2,65],67:[2,65]},{62:[1,82]},{62:[2,70]},{62:[2,71]},{56:[1,83]},{56:[1,84]},{77:[1,85]},{60:[1,86],77:[2,67]},{60:[1,87]},{5:[2,52],11:[2,52],12:[2,52],16:[2,52],17:[2,52],19:[2,52],20:[2,52],21:[2,52],22:[2,52],23:[2,52],24:[2,52],25:[2,52],26:[2,52],27:[2,52],28:[2,52],29:[2,52],30:[2,52],31:[2,52],32:[2,52],33:[2,52],34:[2,52],35:[2,52],36:[2,52],37:[2,52],38:[2,52],39:[2,52],40:[2,52],41:[2,52],42:[2,52],43:[2,52],44:[2,52],45:[2,52],46:[2,52],47:[2,52],48:[2,52],49:[2,52],59:[2,52],64:[2,52],65:[2,52],66:[2,52],67:[2,52]},{57:88,59:[1,70]},{59:[1,89]},{59:[1,90]},{59:[1,91],62:[1,92]},{58:[2,66]},{59:[1,78],76:93},{59:[1,94]},{58:[2,54]},{60:[1,95]},{58:[1,96]},{58:[1,97]},{72:[1,98]},{77:[2,68]},{63:[1,99]},{59:[1,100]},{5:[2,64],11:[2,64],12:[2,64],16:[2,64],17:[2,64],19:[2,64],20:[2,64],21:[2,64],22:[2,64],23:[2,64],24:[2,64],25:[2,64],26:[2,64],27:[2,64],28:[2,64],29:[2,64],30:[2,64],31:[2,64],32:[2,64],33:[2,64],34:[2,64],35:[2,64],36:[2,64],37:[2,64],38:[2,64],39:[2,64],40:[2,64],41:[2,64],42:[2,64],43:[2,64],44:[2,64],45:[2,64],46:[2,64],47:[2,64],48:[2,64],49:[2,64],59:[2,64],64:[2,64],65:[2,64],66:[2,64],67:[2,64]},{5:[2,62],11:[2,62],12:[2,62],16:[2,62],17:[2,62],19:[2,62],20:[2,62],21:[2,62],22:[2,62],23:[2,62],24:[2,62],25:[2,62],26:[2,62],27:[2,62],28:[2,62],29:[2,62],30:[2,62],31:[2,62],32:[2,62],33:[2,62],34:[2,62],35:[2,62],36:[2,62],37:[2,62],38:[2,62],39:[2,62],40:[2,62],41:[2,62],42:[2,62],43:[2,62],44:[2,62],45:[2,62],46:[2,62],47:[2,62],48:[2,62],49:[2,62],59:[2,62],64:[2,62],65:[2,62],66:[2,62],67:[2,62]},{60:[1,101]},{58:[1,102]},{63:[1,103]},{72:[1,104]},{5:[2,55],11:[2,55],12:[2,55],16:[2,55],17:[2,55],19:[2,55],20:[2,55],21:[2,55],22:[2,55],23:[2,55],24:[2,55],25:[2,55],26:[2,55],27:[2,55],28:[2,55],29:[2,55],30:[2,55],31:[2,55],32:[2,55],33:[2,55],34:[2,55],35:[2,55],36:[2,55],37:[2,55],38:[2,55],39:[2,55],40:[2,55],41:[2,55],42:[2,55],43:[2,55],44:[2,55],45:[2,55],46:[2,55],47:[2,55],48:[2,55],49:[2,55],59:[2,55],64:[2,55],65:[2,55],66:[2,55],67:[2,55]},{58:[1,105]},{63:[1,106]},{5:[2,69],11:[2,69],12:[2,69],16:[2,69],17:[2,69],19:[2,69],20:[2,69],21:[2,69],22:[2,69],23:[2,69],24:[2,69],25:[2,69],26:[2,69],27:[2,69],28:[2,69],29:[2,69],30:[2,69],31:[2,69],32:[2,69],33:[2,69],34:[2,69],35:[2,69],36:[2,69],37:[2,69],38:[2,69],39:[2,69],40:[2,69],41:[2,69],42:[2,69],43:[2,69],44:[2,69],45:[2,69],46:[2,69],47:[2,69],48:[2,69],49:[2,69],59:[2,69],64:[2,69],65:[2,69],66:[2,69],67:[2,69]},{58:[1,107]},{5:[2,63],11:[2,63],12:[2,63],16:[2,63],17:[2,63],19:[2,63],20:[2,63],21:[2,63],22:[2,63],23:[2,63],24:[2,63],25:[2,63],26:[2,63],27:[2,63],28:[2,63],29:[2,63],30:[2,63],31:[2,63],32:[2,63],33:[2,63],34:[2,63],35:[2,63],36:[2,63],37:[2,63],38:[2,63],39:[2,63],40:[2,63],41:[2,63],42:[2,63],43:[2,63],44:[2,63],45:[2,63],46:[2,63],47:[2,63],48:[2,63],49:[2,63],59:[2,63],64:[2,63],65:[2,63],66:[2,63],67:[2,63]}],
defaultActions: {14:[2,3],15:[2,4],16:[2,5],17:[2,6],18:[2,7],19:[2,8],20:[2,9],21:[2,10],22:[2,11],23:[2,12],24:[2,13],25:[2,14],26:[2,15],27:[2,56],28:[2,57],29:[2,58],30:[2,59],31:[2,16],32:[2,17],33:[2,18],34:[2,19],35:[2,20],36:[2,21],37:[2,22],38:[2,23],39:[2,24],40:[2,25],41:[2,26],42:[2,27],43:[2,28],44:[2,29],45:[2,30],46:[2,31],47:[2,32],48:[2,33],49:[2,34],50:[2,35],51:[2,36],52:[2,37],53:[2,38],54:[2,39],55:[2,40],56:[2,41],57:[2,42],58:[2,43],59:[2,44],60:[2,45],61:[2,1],62:[2,2],73:[2,70],74:[2,71],85:[2,66],88:[2,54],93:[2,68]},
parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};



//javascript code

/*
Set currentLine like this:
currentLine = yylineno;
switch (yystate)
*/

currentLine = 0;
//Global variables used	
 
warning = "";
 
hashVarType = new Array();
hashTypeVar = new Array();
hashSimpleRelation= new Array();
hashAssignableRelation= new Array();
hashUsedRelation = new Array();

hashUsedVariable = new Array();

hashComposition = new Array();

hashRelation = new Array();
hashRelation["binds"] = new Array();
hashRelation["connects"] = new Array();
hashRelation["maps"] = new Array();
hashRelation["client"] = new Array();
hashRelation["component_of"] = new Array();

hashAttribute = new Array();
hashAttribute['str_location'] = new Array();
hashAttribute['geo_location'] = new Array();
hashAttribute['tf_type'] = new Array();


hashSuperType = new Array();

/* Initializing super types */
//TFs
hashSuperType["so-tf"] = "tf";
hashSuperType["sk-tf"] = "tf";
hashSuperType["bi-tf"] = "tf";

//AFs
hashSuperType["so-af"] = "af";
hashSuperType["sk-af"] = "af";
hashSuperType["bi-af"] = "af";

//LPFs
hashSuperType["so-lpf"] = "lpf";
hashSuperType["sk-lpf"] = "lpf";
hashSuperType["bi-lpf"] = "lpf";

//Matrices
hashSuperType["uni-matrix"] = "matrix";
hashSuperType["bi-matrix"] = "matrix";
hashSuperType["so-matrix"] = "matrix";
hashSuperType["sk-matrix"] = "matrix";

//Ports
hashSuperType["input"] = "port";
hashSuperType["output"] = "port";

//Reference Points
hashSuperType["fp"] = "rp";
hashSuperType["fep"] = "rp";
hashSuperType["ap"] = "rp";

//Interfaces
hashSuperType["in_int"] = "interface";
hashSuperType["out_int"] = "interface";

//Transport Entity
hashSuperType["ate"] = "transport_entity";
hashSuperType["nc"] = "transport_entity";
hashSuperType["lc"] = "transport_entity";
hashSuperType["mc"] = "transport_entity";
hashSuperType["cfte"] = "transport_entity";


/* Initializing Relations cardinalities */
//componentOf cardinalities needs to be inverted!!!

/* Simple Relations and Component Of */
/* Layer */
//Layer * client * Layer
hashSimpleRelation["client"+"layer"+"layer"] = createRelation(0,-1,0,-1);

//Layer * componentOf * Transport Function
hashSimpleRelation["component_of"+"layer"+"tf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["component_of"+"layer"+"af"] = createRelation(0,-1,0,-1);
hashSimpleRelation["component_of"+"layer"+"lpf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["component_of"+"layer"+"matrix"] = createRelation(0,-1,0,-1);
hashSimpleRelation["component_of"+"layer"+"sn"] = createRelation(0,-1,0,-1);
hashSimpleRelation["component_of"+"layer"+"pm"] = createRelation(0,-1,0,-1);

/* Equipment */
//Output Interface 0..1 binds 0..1 Input Interface
hashSimpleRelation["binds"+"out_int"+"in_int"] = createRelation(0,1,0,1);

//Input Interface 0..1 connects 0..1 Input
hashSimpleRelation["connects"+"out_int"+"in_int"] = createRelation(0,1,0,1);

//Input Interface 0..1 maps 0..1 Input
hashSimpleRelation["maps"+"in_int"+"input"] = createRelation(0,1,0,1);

//Output Interface 0..1 maps 0..1 Output
hashSimpleRelation["maps"+"out_int"+"output"] = createRelation(0,1,0,1);

//Interface 0..1 binds 0..1 Port
hashSimpleRelation["binds"+"interface"+"port"] = createRelation(0,1,0,1);

//Equipment 0..1 componentOf * Interface
hashSimpleRelation["component_of"+"equip"+"interface"] = createRelation(0,-1,0,1);

//Equipment * componentOf 0..1 Transport Function
hashSimpleRelation["component_of"+"equip"+"tf"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"equip"+"af"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"equip"+"lpf"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"equip"+"matrix"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"equip"+"sn"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"equip"+"pm"] = createRelation(0,-1,0,1);

/* Site */
//Site 0..1 componentOf * Equipment
hashSimpleRelation["component_of"+"site"+"equip"] = createRelation(0,-1,0,1);

hashSimpleRelation["connects"+"site"+"site"] = createRelation(0,-1,0,-1);

/* Transport Entity */
//Reference Point * connects * Reference Points
hashSimpleRelation["connects"+"rp"+"rp"] = createRelation(0,-1,0,1);

/* Reference Point */
//Bindable Element * binds * Bindable Element
hashSimpleRelation["binds"+"tf"+"port"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"af"+"port"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"lpf"+"port"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"matrix"+"port"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"sn"+"port"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"pm"+"port"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"port"+"tf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"port"+"af"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"port"+"lpf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"port"+"matrix"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"port"+"sn"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"port"+"pm"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"port"+"port"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"tf"+"tf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"af"+"tf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"lpf"+"tf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"matrix"+"tf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"sn"+"tf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"pm"+"tf"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"tf"+"af"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"tf"+"lpf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"tf"+"matrix"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"tf"+"sn"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"tf"+"pm"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"af"+"af"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"lpf"+"af"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"matrix"+"af"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"sn"+"af"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"pm"+"af"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"af"+"lpf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"af"+"matrix"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"af"+"sn"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"af"+"pm"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"lpf"+"lpf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"matrix"+"lpf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"sn"+"lpf"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"pm"+"lpf"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"lpf"+"matrix"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"lpf"+"sn"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"lpf"+"pm"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"matrix"+"matrix"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"sn"+"matrix"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"pm"+"matrix"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"matrix"+"sn"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"matrix"+"pm"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"sn"+"sn"] = createRelation(0,-1,0,-1);
hashSimpleRelation["binds"+"pm"+"sn"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"sn"+"pm"] = createRelation(0,-1,0,-1);

hashSimpleRelation["binds"+"pm"+"pm"] = createRelation(0,-1,0,-1);

/* Transport Function */
//Transport Function 0..1 componentOf * Port
hashSimpleRelation["component_of"+"tf"+"port"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"af"+"port"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"lpf"+"port"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"matrix"+"port"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"snc"+"port"] = createRelation(0,-1,0,1);
hashSimpleRelation["component_of"+"pm"+"port"] = createRelation(0,-1,0,1);

//TF 0..1 componentOf 0..2 TF
hashSimpleRelation["component_of"+"tf"+"tf"] = createRelation(0,2,0,1);

//AF 0..1 componentOf 0..2 AF
hashSimpleRelation["component_of"+"af"+"af"] = createRelation(0,2,0,1);

//LPF 0..1 componentOf 0..2 LPF
hashSimpleRelation["component_of"+"lpf"+"lpf"] = createRelation(0,2,0,1);

//Matrix 0..1 componentOf 0..2 Matrix
hashSimpleRelation["component_of"+"matrix"+"matrix"] = createRelation(0,2,0,1);

//************//

/* Assignable Relations */
/* Transport Entity */
hashAssignableRelation["transport_entity"+"connects"+"rp"+"rp"] = createRelation(0,2,0,1);

/* Reference Point */
hashAssignableRelation["rp"+"binds"+"tf"+"port"] = createRelation(0,-1,0,1);
hashAssignableRelation["rp"+"binds"+"af"+"port"] = createRelation(0,-1,0,1);
hashAssignableRelation["rp"+"binds"+"lpf"+"port"] = createRelation(0,-1,0,1);
hashAssignableRelation["rp"+"binds"+"matrix"+"port"] = createRelation(0,-1,0,1);
hashAssignableRelation["rp"+"binds"+"sn"+"port"] = createRelation(0,-1,0,1);
hashAssignableRelation["rp"+"binds"+"pm"+"port"] = createRelation(0,-1,0,1);

/* Methods */    
/*
	Put in the hash the variables and verify multi-declarations
*/
function newVariable(variable) {
	//Verify if the variable has been declared already
	if(hashVarType[variable] !== undefined){
		throw new VariableMultiDeclared((currentLine+1),variable);	
	}
	//Put a flag in hash of variables to signal the use
	hashVarType[variable] = 0;
}

/*
	Set the type of declared variables
*/
function newElement(element){
	//For all declared variables 
	for (var variable in hashVarType){
		//if not initialized yet
		if(hashVarType[variable] == 0){
			//set the type for variable
			hashVarType[variable] = element;
			//push the variables in hashType
			if(hashTypeVar[element] === undefined){
				hashTypeVar[element] = [];
			}
			hashTypeVar[element].push(variable);
		}		
	}
}

/*
	Create a internal relation: source relation target
*/
function newSimpleRelation(relation, source, target){
	//verify if source and target are valid variables
	verifyDelclaredVariable(source);
	verifyDelclaredVariable(target);
	
	//Get supertypes of source and general
	var sourceType = getSuperType(hashVarType[source]);
	var targetType = getSuperType(hashVarType[target]);		
	
	var reference;
	//Verify relationship possibility
	if(hashSimpleRelation[relation+sourceType+targetType] === undefined){
		//For specific cases
		if(hashSimpleRelation[relation+hashVarType[source]+hashVarType[target]] === undefined){
			throw new WrongRelation(currentLine+1);
		}else{
			reference = relation+hashVarType[source]+hashVarType[target];			
		}		
	}else{
		reference = relation+sourceType+targetType;
	}
	
	//Create relationship
	if(hashUsedRelation[reference] === undefined){
		//first case, initialize
		hashUsedRelation[reference] = [];
	}
	//add current relationship to hashUsedRelation
	hashUsedRelation[reference].push(createRelationship(source, relation, target));
	
	//Verify cardinality possibility
	var relationshipDefined = hashSimpleRelation[reference];
	
	var srcCont = 0, trgCont = 0;
	
	var arr = hashUsedRelation[reference];
	
	//for all relationships of the tuple {relation, sourceType, targetType}
	for(var i = 0; i < arr.length; i++){
		var relationship = arr[i];
		//source cardinality verification
		if(relationship.source == source){
			srcCont++;
		}
		
		if(relationship.target == target){
			trgCont++;
		}
	}
	
	if(relationshipDefined.srcMax != -1 && srcCont > relationshipDefined.srcMax){
		throw new WrongCardinality(currentLine+1);
	}
	
	if(relationshipDefined.trgMax != -1 && trgCont > relationshipDefined.trgMax){
		throw new WrongCardinality(currentLine+1);
	}	
	
	if(relation != "component_of"){
		hashRelation[relation].push(source+":"+target);
	}
}

/*
	Create a assignable relation
*/

function newAssignableRelation(ret, relation, source, target){
	//Create a new simple relation between source and target
	newSimpleRelation(relation,source,target);
	
	//get supertypes
	var retType = getSuperType(hashVarType[ret]);
	var sourceType = getSuperType(hashVarType[source]);
	var targetType = getSuperType(hashVarType[target]);
		
	//verify if it's a possible assignable relation
	if(hashAssignableRelation[retType+relation+sourceType+targetType] === undefined){
		throw new WrongRelation(currentLine+1);
	}
	
	hashRelation[relation].push(ret+":"+source+":"+target);
}

/*
	Hold used variables
*/
function usedVariable(variable){
	hashUsedVariable.push(variable);
}

/*
	Creating element compositions
*/
function newElementComposition(whole){
	var cofRel = whole+":";
	
	for(var i = 0; i < hashUsedVariable.length; i++){
		newSimpleRelation("component_of",whole,hashUsedVariable[i]);
		cofRel += hashUsedVariable[i]+",";
	}
	
	cofRel = cofRel.substring(0,cofRel.length-1);
	hashRelation["component_of"].push(cofRel);
	
	//clean up used variables
	hashUsedVariable = [];
}

/*
	Adding attributes
*/
function addLocationStr(owner,str){
	verifyDelclaredVariable(owner);
	
	var elemSuperType = getSuperType(hashVarType[owner]);
	var transportFunctions = new Array("tf","af","lpf","matrix","pm","sn","port");
	
	if(transportFunctions.indexOf(elemSuperType) == -1){
		if(transportFunctions.indexOf(hashVarType[owner]) == -1){
			throw new WrongAttributeDeclaration(currentLine+1);
		}
		throw new WrongAttributeDeclaration(currentLine+1);
	}
	
	hashAttribute['str_location'].push(owner+":"+str);
}

function addLocationGeo(owner, g1,g2){
	verifyDelclaredVariable(owner);
	
	var elemSuperType = getSuperType(hashVarType[owner]);
	var transportFunctions = new Array("tf","af","lpf","matrix","pm","sn","port");
	
	if(transportFunctions.indexOf(elemSuperType) == -1){
		if(transportFunctions.indexOf(hashVarType[owner]) == -1){
			throw new WrongAttributeDeclaration(currentLine+1);
		}
		throw new WrongAttributeDeclaration(currentLine+1);
	}
	
	
	g1 = g1.replace(/:/g, '*');
	g2 = g2.replace(/:/g, '*');
	hashAttribute['geo_location'].push(owner+":"+g1+":"+g2);
}

function addType(tf,str){
	verifyDelclaredVariable(tf);
	
	var tfSuperType = getSuperType(hashVarType[tf]);
	
	if(tfSuperType != "tf"){
		throw new WrongAttributeDeclaration(currentLine+1);
	}
	
	hashAttribute['tf_type'].push(tf+":"+str);
}

/* Private Functions */
//Verify if the variable has been declared already
function verifyDelclaredVariable(variable){
	if(hashVarType[variable] === undefined){
		throw new VariableNotDeclared((currentLine+1),variable);	
	}
}

function createRelation(srcMin, srcMax, trgMin, trgMax){
	var relation = new Object();
	
	relation.srcMin = srcMin;
	relation.srcMax = srcMax;
	relation.trgMin = trgMin;
	relation.trgMax = trgMax;
	
	return relation;
}

function createRelationship(source, relation, target){
	var relationship = new Object();
	
	relationship.source = source;
	relationship.relation = relation;
	relationship.target = target;
	
	return relationship;
}

function getSuperType(cls){	
	if(hashSuperType[cls] === undefined){
		return cls;
	}
	return hashSuperType[cls];	
}

/* Exceptions */

//An variable was multi-declared
function VariableMultiDeclared(line, variable) {
   this.message = "Line "+line+": The variable "+variable+" was  multi-declared";
}

//An variable was not declared
function VariableNotDeclared(line, variable) {
   this.message = "Line "+line+": The variable "+variable+" was  not declared";
}

//An wrong relation was used
function WrongRelation(line){
	this.message = "Line "+line+": Variable type not supported at function";		
}

//Wrong cardinality
function WrongCardinality(line){
	this.message = "Line "+line+": Incorrect attribution";		
}

//Wrong Attribute declaration
function WrongAttributeDeclaration(line){
	this.message = "Line "+line+": Incorrect attribution";		
}/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str,hash){if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

// resets the lexer, sets new input
setInput:function (input){this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

// consumes and returns one char from the input
input:function (){var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

// unshifts one char (or a string) into the input
unput:function (ch){var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]}this.yyleng=this.yytext.length;return this},

// When called from action, caches matched text and appends it on next action
more:function (){this._more=true;return this},

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function (){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

// retain first n characters of the match
less:function (n){this.unput(this.match.slice(n))},

// displays already matched input, i.e. for error messages
pastInput:function (){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

// displays upcoming input, i.e. for error messages
upcomingInput:function (){var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function (){var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match,indexed_rule){var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}return false},

// return next match in input
next:function (){if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

// return next match that has a token
lex:function lex(){var r=this.next();if(r){return r}else{return this.lex()}},

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition){this.conditionStack.push(condition)},

// pop the previously active lexer condition state off the condition stack
popState:function popState(){var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n){n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

// alias for begin(condition)
pushState:function pushState(condition){this.begin(condition)},

// return the number of states currently on the stack
stateStackSize:function stateStackSize(){return this.conditionStack.length},
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 20
break;
case 2:return 21
break;
case 3:return 22
break;
case 4:return 23
break;
case 5:return 24
break;
case 6:return 25
break;
case 7:return 26
break;
case 8:return 27
break;
case 9:return 28
break;
case 10:return 29
break;
case 11:return 30
break;
case 12:return 31
break;
case 13:return 32
break;
case 14:return 33	
break;
case 15:return 34
break;
case 16:return 35
break;
case 17:return 36
break;
case 18:return 11
break;
case 19:return 12
break;
case 20:return 37
break;
case 21:return 38
break;
case 22:return 39
break;
case 23:return 40
break;
case 24:return 41
break;
case 25:return 42
break;
case 26:return 43
break;
case 27:return 44
break;
case 28:return 45
break;
case 29:return 46
break;
case 30:return 47
break;
case 31:return 16
break;
case 32:return 17
break;
case 33:return 48
break;
case 34:return 49
break;
case 35:return 19
break;
case 36:return 64
break;
case 37:return 65
break;
case 38:return 66
break;
case 39:return 67
break;
case 40:return 71
break;
case 41:return 73
break;
case 42:return 56
break;
case 43:return 70
break;
case 44:return 58
break;
case 45:return 78
break;
case 46:return 60
break;
case 47:return 75
break;
case 48:return 77
break;
case 49:return 62
break;
case 50:return 63
break;
case 51:return 72
break;
case 52:return 59
break;
case 53:return 'n_int'
break;
case 54:/* ignore */
break;
case 55:return 5
break;
case 56:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:tf\b)/,/^(?:so-tf\b)/,/^(?:sk-tf\b)/,/^(?:bi-tf\b)/,/^(?:af\b)/,/^(?:so-af\b)/,/^(?:sk-af\b)/,/^(?:bi-af\b)/,/^(?:lpf\b)/,/^(?:so-lpf\b)/,/^(?:sk-lpf\b)/,/^(?:bi-lpf\b)/,/^(?:matrix\b)/,/^(?:uni-matrix\b)/,/^(?:so-matrix\b)/,/^(?:sk-matrix\b)/,/^(?:bi-matrix\b)/,/^(?:sn\b)/,/^(?:pm\b)/,/^(?:input\b)/,/^(?:output\b)/,/^(?:rp\b)/,/^(?:fep\b)/,/^(?:ap\b)/,/^(?:fp\b)/,/^(?:ate\b)/,/^(?:nc\b)/,/^(?:lc\b)/,/^(?:mc\b)/,/^(?:cfte\b)/,/^(?:layer\b)/,/^(?:equip\b)/,/^(?:in_int\b)/,/^(?:out_int\b)/,/^(?:site\b)/,/^(?:binds\b)/,/^(?:connects\b)/,/^(?:client\b)/,/^(?:maps\b)/,/^(?:location\b)/,/^(?:type\b)/,/^(?::)/,/^(?:\.)/,/^(?:;)/,/^(?:=)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:(-)?[0-9]+:[0-9]+:[0-9]+)/,/^(?:[A-Za-z_]+[0-9A-Za-z_]*)/,/^(?:[0-9]+)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}